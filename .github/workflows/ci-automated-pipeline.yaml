name: '[CI/CD] CI Pipeline for automated PRs'
on: # rebuild any PRs and main branch changes
  pull_request_target:
    types:
      - opened
    branches:
      - master
      - bitnami:master
    paths:
      - 'bitnami/**'
env:
  CSP_API_URL: https://console.cloud.vmware.com
  CSP_API_TOKEN: ${{ secrets.CSP_API_TOKEN }}
  VIB_PUBLIC_URL: https://cp.bromelia.vmware.com
jobs:
  auto-pr-triage:
    runs-on: ubuntu-latest
    name: Triage for automated PRs
    if: ${{ github.actor == 'bitnami-bot' }}
    steps:
      # Enables auto-merge and adds necessary labels for automated releases' PRs
      - id: labeling
        name: Label PR
        uses: andymckay/labeler@1.0.4
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          add-labels: "verify, auto-merge"
      - id: auto-merge
        name: Enable auto-merge
        run: |
          curl --request POST \
          --url https://api.github.com/graphql \
          --header 'authorization: Bearer ${{ secrets.BITNAMI_BOT_TOKEN }}' \
          --data '{
            "query": "mutation { enablePullRequestAutoMerge(input: {pullRequestId: \"${{ github.event.pull_request.node_id }}\", mergeMethod: SQUASH}) { clientMutationId }}"
            }' \
          --fail
  get-chart:
    runs-on: ubuntu-latest
    name: Get modified charts
    needs: auto-pr-triage
    outputs:
      chart: ${{ steps.get-chart.outputs.chart }}
    steps:
      - id: get-chart
        name: Get modified charts
        run: |
          # Using the Github API to detect the files changed as git merge-base stops working when the branch is behind
          PR_URL="https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files"
          files_changed_data=$(curl -s --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' -X GET -G "$PR_URL")
          files_changed="$(echo $files_changed_data | jq -r '.[] | .filename')"
          # Adding || true to avoid "Process exited with code 1" errors
          charts_dirs_changed="$(echo "$files_changed" | xargs dirname | grep -o "bitnami/[^/]*" | sort | uniq || true)"
          num_charts_changed="$(echo "$charts_dirs_changed" | grep -c "bitnami" || true)"
          num_version_bumps="$(echo "$files_changed_data" | jq -r '[.[] | select(.filename|endswith("Chart.yaml")) | select(.patch|contains("+version")) ] | length' )"

          if [[ "$num_charts_changed" -ne "$num_version_bumps" ]]; then
            # Changes done in charts but version not bumped
            echo -e "Detected changes in charts without version bump in Chart.yaml.\nCharts changed: ${num_charts_changed}\n${charts_dirs_changed}\nVersion bumps detected: ${num_version_bumps}"
            exit 1
          elif [[ "$num_charts_changed" -eq "1" ]]; then
            # Changes done in only one chart -> OK
            chart_name=$(echo "$charts_dirs_changed" | sed "s|bitnami/||g")
            echo "::set-output name=chart::${chart_name}"
          else
            # Changes should only modify one chart
            echo -e "Changes should modify no less and no more than one chart. The rest of the tests will be skipped."
            exit 1
          fi
  vib-verify:
    runs-on: ubuntu-latest
    needs: get-chart
    name: VIB Verify
    steps:
      - uses: actions/checkout@v2
        name: Checkout Repository
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
      - uses: vmware-labs/vmware-image-builder-action@main
        name: Verify ${{ needs.get-chart.outputs.chart }}
        with:
          pipeline: ${{ needs.get-chart.outputs.chart }}/vib-verify.json
        env:
          # Target-Platform used by default
          VIB_ENV_TARGET_PLATFORM: ${{ secrets.VIB_ENV_TARGET_PLATFORM }}
          # Alternative Target-Platform to be used in case of incompatibilities
          VIB_ENV_ALTERNATIVE_TARGET_PLATFORM: ${{ secrets.VIB_ENV_ALTERNATIVE_TARGET_PLATFORM }}
  auto-pr-review:
    runs-on: ubuntu-latest
    needs: [get-chart, vib-verify]
    name: Reviewal for automated PRs
    if: |
      always() &&
      github.actor == 'bitnami-bot'
    steps:
      # Approves the CI's PR if the 'VIB Verify' job succeeded
      # Approved by the 'github-actions' user. A PR can't be approved by its author
      - name: Approval
        if: ${{ needs.vib-verify.result == 'success' }}
        run: |
          curl --request POST \
          --url https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews \
          --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          --header 'content-type: application/json' \
          --data '{
            "event": "APPROVE"
            }' \
          --fail
      - name: Remove auto-merge label
        if: ${{ needs.get-chart.result == 'failure' || needs.vib-verify.result == 'failure' }}
        uses: andymckay/labeler@1.0.4
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          remove-labels: "auto-merge"
      - name: Disable auto-merge
        if: ${{ needs.get-chart.result == 'failure' || needs.vib-verify.result == 'failure' }}
        run: |
          curl --request POST \
          --url https://api.github.com/graphql \
          --header 'authorization: Bearer ${{ secrets.BITNAMI_BOT_TOKEN }}' \
          --data '{
            "query": "mutation { disablePullRequestAutoMerge(input: {pullRequestId: \"${{ github.event.pull_request.node_id }}\"}) { clientMutationId }}"
            }' \
          --fail
      - name: Manual review required
        if: ${{ needs.get-chart.result == 'failure' || needs.vib-verify.result == 'failure' }}
        run: |
          curl --request POST \
          --url https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments \
          --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          --header 'content-type: application/json' \
          --data '{
            "body": "There has been an error during the automated release process. Manual revision is now required."
            }' \
          --fail
          curl --request POST \
          --url https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/requested_reviewers \
          --header 'authorization: Bearer ${{ secrets.BITNAMI_BOT_TOKEN }}' \
          --header 'content-type: application/json' \
          --data '{
            "team_reviewers": ["build-maintainers"]
            }' \
          --fail
