apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ include "common.names.fullname" . }}-scheduler
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: scheduler
    {{- if .Values.commonLabels }}
      {{- include "common.tplvalues.render" (dict "value" .Values.commonLabels "context" $) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" (dict "value" .Values.commonAnnotations "context" $) | trim | nindent 4 }}
  {{- end }}
spec:
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: scheduler
  replicas: {{ default 1 .Values.replicaCount }}
  template:
    metadata:
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        app.kubernetes.io/component: scheduler
    {{- if .Values.podAnnotations }}
      annotations: {{- include "common.tplvalues.render" (dict "value" .Values.podAnnotations "context" $) | trim | nindent 8 }}
    {{- end }}
    spec:
      {{- include "airflow.imagePullSecrets" . | nindent 6 }}
      {{- if .Values.securityContext.enabled }}
      securityContext: {{- omit .Values.securityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "airflow.serviceAccountName" . }}
      {{- if .Values.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAffinityPreset "component" "scheduler" "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAntiAffinityPreset "component" "scheduler" "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.nodeAffinityPreset.type "key" .Values.nodeAffinityPreset.key "values" .Values.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if or .Values.airflow.cloneDagFilesFromGit.enabled .Values.airflow.clonePluginsFromGit.enabled }}
      initContainers:
        - name: git-clone-repository
          image: {{ include "git.image" . }}
          imagePullPolicy: {{ .Values.git.pullPolicy | quote }}
          {{- if .Values.airflow.gitCloneContainer.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.airflow.gitCloneContainer.command "context" $) | nindent 12 }}
          {{- else }}
          command:
            - /bin/bash
            - -ec
            - |
              {{- if .Values.airflow.cloneDagFilesFromGit.enabled }}
              {{- if and .Values.airflow.cloneDagFilesFromGit.repository .Values.airflow.cloneDagFilesFromGit.branch }}
                git clone {{ .Values.airflow.cloneDagFilesFromGit.repository }} --branch {{ .Values.airflow.cloneDagFilesFromGit.branch }} /dags
              {{- end }}
              {{- range .Values.airflow.cloneDagFilesFromGit.repositories }}
                git clone {{ .repository }} --branch {{ .branch }} /dags-{{ .name | kebabcase }}
              {{- end }}
              {{- end }}
              {{- if .Values.airflow.clonePluginsFromGit.enabled }}
                git clone {{ .Values.airflow.clonePluginsFromGit.repository }} --branch {{ .Values.airflow.clonePluginsFromGit.branch }} /plugins
              {{- end }}
          {{- end }}
          {{- if .Values.airflow.gitCloneContainer.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.airflow.gitCloneContainer.args "context" $) | nindent 12 }}
          {{- end }}
          volumeMounts:
            {{- if .Values.airflow.cloneDagFilesFromGit.enabled }}
            {{- if and .Values.airflow.cloneDagFilesFromGit.repository .Values.airflow.cloneDagFilesFromGit.branch }}
            - name: git-cloned-dag-files
              mountPath: /dags
            {{- end }}
            {{- range .Values.airflow.cloneDagFilesFromGit.repositories }}
            - name: git-cloned-dag-files-{{ .name | kebabcase }}
              mountPath: /dags-{{ .name | kebabcase }}
            {{- end }}
            {{- end }}
            {{- if .Values.airflow.clonePluginsFromGit.enabled }}
            - name: git-cloned-plugins
              mountPath: /plugins
            {{- end }}
            {{- if .Values.airflow.gitCloneContainer.extraVolumeMounts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.airflow.gitCloneContainer.extraVolumeMounts "context" $) | nindent 12 }}
            {{- end }}
          {{- if .Values.airflow.gitCloneContainer.extraEnvVars }}
          env: {{- include "common.tplvalues.render" (dict "value" .Values.airflow.gitCloneContainer.extraEnvVars "context" $) | nindent 12 }}
          {{- end }}
          {{- if or .Values.airflow.gitCloneContainer.extraEnvVarsCM .Values.airflow.gitCloneContainer.extraEnvVarsSecret }}
          envFrom:
            {{- if .Values.airflow.gitCloneContainer.extraEnvVarsCM }}
            - configMapRef:
                name: {{ .Values.airflow.gitCloneContainer.extraEnvVarsCM }}
            {{- end }}
            {{- if .Values.airflow.gitCloneContainer.extraEnvVarsSecret }}
            - secretRef:
                name: {{ .Values.airflow.gitCloneContainer.extraEnvVarsSecret }}
            {{- end }}
          {{- end }}
      containers:
        - name: git-repo-syncer
          image: {{ include "git.image" . | quote }}
          imagePullPolicy: {{ .Values.git.pullPolicy | quote }}
          {{- if .Values.airflow.gitSyncContainer.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.airflow.gitSyncContainer.command "context" $) | nindent 12 }}
          {{- else }}
          command:
            - /bin/bash
            - -ec
            - |
              while true; do
                  {{- if .Values.airflow.cloneDagFilesFromGit.enabled }}
                  {{- if and .Values.airflow.cloneDagFilesFromGit.repository .Values.airflow.cloneDagFilesFromGit.branch }}
                  cd /dags && git pull origin {{ .Values.airflow.cloneDagFilesFromGit.branch }}
                  {{- end }}
                  {{- range .Values.airflow.cloneDagFilesFromGit.repositories }}
                  cd /dags-{{ .name | kebabcase }} && git pull origin {{ .branch }}
                  {{- end }}
                  {{- end }}
                  {{- if .Values.airflow.clonePluginsFromGit.enabled }}
                  cd /plugins && git pull origin {{ .Values.airflow.clonePluginsFromGit.branch }}
                  {{- end }}
                  sleep {{ default "60" .Values.airflow.gitSyncInterval }}
              done
          {{- end }}
          volumeMounts:
            {{- if .Values.airflow.cloneDagFilesFromGit.enabled }}
            {{- if and .Values.airflow.cloneDagFilesFromGit.repository .Values.airflow.cloneDagFilesFromGit.branch }}
            - name: git-cloned-dag-files
              mountPath: /dags
            {{- end }}
            {{- range .Values.airflow.cloneDagFilesFromGit.repositories }}
            - name: git-cloned-dag-files-{{ .name | kebabcase }}
              mountPath: /dags-{{ .name | kebabcase }}
            {{- end }}
            {{- end }}
            {{- if .Values.airflow.clonePluginsFromGit.enabled }}
            - name: git-cloned-plugins
              mountPath: /plugins
            {{- end }}
            {{- if .Values.airflow.gitSyncContainer.extraVolumeMounts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.airflow.gitSyncContainer.extraVolumeMounts "context" $) | nindent 12 }}
            {{- end }}
          {{- if .Values.airflow.gitSyncContainer.extraEnvVars }}
          env: {{- include "common.tplvalues.render" (dict "value" .Values.airflow.gitSyncContainer.extraEnvVars "context" $) | nindent 12 }}
          {{- end }}
          {{- if or .Values.airflow.gitSyncContainer.extraEnvVarsCM .Values.airflow.gitSyncContainer.extraEnvVarsSecret }}
          envFrom:
            {{- if .Values.airflow.gitSyncContainer.extraEnvVarsCM }}
            - configMapRef:
                name: {{ .Values.airflow.gitSyncContainer.extraEnvVarsCM }}
            {{- end }}
            {{- if .Values.airflow.gitSyncContainer.extraEnvVarsSecret }}
            - secretRef:
                name: {{ .Values.airflow.gitSyncContainer.extraEnvVarsSecret }}
            {{- end }}
          {{- end }}
      {{- else }}
      containers:
      {{- end }}
        - name: airflow-scheduler
          image: {{ include "airflow.schedulerImage" . | quote }}
          imagePullPolicy: {{ .Values.schedulerImage.pullPolicy | quote }}
          {{- if .Values.airflow.scheduler.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.airflow.scheduler.command "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.airflow.scheduler.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.airflow.scheduler.args "context" $) | nindent 12 }}
          {{- end }}
          env:
            {{- include "airflow.configure.airflow.common" . | nindent 12 }}
            {{- include "airflow.configure.database" . | nindent 12 }}
            {{- include "airflow.configure.redis" . | nindent 12 }}
            {{- if .Values.airflow.extraEnvVars }}
              {{- include "common.tplvalues.render" (dict "value" .Values.airflow.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
            {{- if .Values.airflow.scheduler.extraEnvVars }}
              {{- include "common.tplvalues.render" (dict "value" .Values.airflow.scheduler.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            {{- if .Values.airflow.extraEnvVarsCM }}
            - configMapRef:
                name: {{ .Values.airflow.extraEnvVarsCM }}
            {{- end }}
            {{- if .Values.airflow.extraEnvVarsSecret }}
            - secretRef:
                name: {{ .Values.airflow.extraEnvVarsSecret }}
            {{- end }}
            {{- if .Values.airflow.scheduler.extraEnvVarsCM }}
            - configMapRef:
                name: {{ .Values.airflow.scheduler.extraEnvVarsCM }}
            {{- end }}
            {{- if .Values.airflow.scheduler.extraEnvVarsSecret }}
            - secretRef:
                name: {{ .Values.airflow.scheduler.extraEnvVarsSecret }}
            {{- end }}
          ports:
            - name: task-logs
              containerPort: {{ .Values.airflow.worker.port }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
          {{- end }}
          volumeMounts:
          {{- if .Files.Glob "files/dags/*.py" }}
            - name: local-dag-files
              mountPath: /opt/bitnami/airflow/dags/local
          {{- end }}
          {{- if .Values.airflow.dagsConfigMap }}
            - name: external-dag-files
              mountPath: /opt/bitnami/airflow/dags/external
          {{- end }}
          {{- if .Values.airflow.cloneDagFilesFromGit.enabled }}
          {{- if and .Values.airflow.cloneDagFilesFromGit.repository .Values.airflow.cloneDagFilesFromGit.branch }}
            - name: git-cloned-dag-files
              mountPath: /opt/bitnami/airflow/dags/git
              {{- if .Values.airflow.cloneDagFilesFromGit.path }}
              subPath: {{ .Values.airflow.cloneDagFilesFromGit.path }}
              {{- end }}
          {{- end }}
          {{- range .Values.airflow.cloneDagFilesFromGit.repositories }}
            - name: git-cloned-dag-files-{{ .name | kebabcase }}
              mountPath: /opt/bitnami/airflow/dags/git-{{ .name | kebabcase }}
              {{- if .path }}
              subPath: {{ .path }}
              {{- end }}
          {{- end }}
          {{- end }}
          {{- if .Values.airflow.clonePluginsFromGit.enabled }}
            - name: git-cloned-plugins
              mountPath: /opt/bitnami/airflow/plugins
              {{- if .Values.airflow.clonePluginsFromGit.path }}
              subPath: {{ .Values.airflow.clonePluginsFromGit.path }}
              {{- end }}
          {{- end }}
          {{- if .Values.airflow.configurationConfigMap }}
            - name: custom-configuration-file
              mountPath: /opt/bitnami/airflow/airflow.cfg
              subPath: airflow.cfg
          {{- end }}
          {{- if .Values.airflow.scheduler.extraVolumeMounts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.airflow.scheduler.extraVolumeMounts "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.airflow.scheduler.resources }}
          resources: {{- toYaml .Values.airflow.scheduler.resources | nindent 12 }}
          {{- end }}
      volumes:
      {{- if .Files.Glob "files/dags/*.py" }}
        - name: local-dag-files
          configMap:
            name: {{ include "common.names.fullname" . }}-dag-files
      {{- end }}
      {{- if .Values.airflow.dagsConfigMap }}
        - name: external-dag-files
          configMap:
            name: {{ .Values.airflow.dagsConfigMap }}
      {{- end }}
      {{- if .Values.airflow.cloneDagFilesFromGit.enabled }}
      {{- if and .Values.airflow.cloneDagFilesFromGit.repository .Values.airflow.cloneDagFilesFromGit.branch }}
        - name: git-cloned-dag-files
          emptyDir: {}
      {{- end }}
      {{- range .Values.airflow.cloneDagFilesFromGit.repositories }}
        - name: git-cloned-dag-files-{{ .name | kebabcase }}
          emptyDir: {}
      {{- end }}
      {{- end }}
      {{- if .Values.airflow.clonePluginsFromGit.enabled }}
        - name: git-cloned-plugins
          emptyDir: {}
      {{- end }}
      {{- if .Values.airflow.configurationConfigMap }}
        - name: custom-configuration-file
          configMap:
            name: {{ .Values.airflow.configurationConfigMap }}
      {{- end }}
      {{- if .Values.airflow.scheduler.extraVolumes }}
      {{- include "common.tplvalues.render" (dict "value" .Values.airflow.scheduler.extraVolumes "context" $) | nindent 8 }}
      {{- end }}
