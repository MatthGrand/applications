apiVersion: {{ include "common.capabilities.statefulset.apiVersion" . }}
kind: StatefulSet
metadata:
  name: {{ include "common.names.fullname" . }}-worker
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: worker
    {{- if .Values.commonLabels }}
      {{- include "common.tplvalues.render" (dict "value" .Values.commonLabels "context" $) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" (dict "value" .Values.commonAnnotations "context" $) | nindent 4 }}
  {{- end }}
spec:
  {{- if .Values.airflow.worker.podManagementPolicy }}
  podManagementPolicy: {{ .Values.airflow.worker.podManagementPolicy | quote }}
  {{- end }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: worker
  serviceName: {{ include "common.names.fullname" . }}-worker-headless
  replicas: {{ .Values.airflow.worker.replicas }}
  updateStrategy:
    type: {{ .Values.updateStrategy | quote }}
    {{- if (eq "Recreate" .Values.updateStrategy) }}
    rollingUpdate: null
    {{- else if .Values.rollingUpdatePartition }}
    rollingUpdate:
      partition: {{ .Values.rollingUpdatePartition }}
    {{- end }}
  template:
    metadata:
    {{- if .Values.airflow.worker.podAnnotations }}
      annotations: {{- include "common.tplvalues.render" (dict "value" .Values.airflow.worker.podAnnotations "context" $) | nindent 8 }}
    {{- end }}
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        app.kubernetes.io/component: worker
    spec:
      {{- include "airflow.imagePullSecrets" . | nindent 6 }}
      {{- if .Values.securityContext.enabled }}
      securityContext: {{- omit .Values.securityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "airflow.serviceAccountName" . }}
      {{- if .Values.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAffinityPreset "component" "worker" "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAntiAffinityPreset "component" "worker" "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.nodeAffinityPreset.type "key" .Values.nodeAffinityPreset.key "values" .Values.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" $) | nindent 8 }}
      {{- end }}
      initContainers: {{- include "airflow.git.containers.clone" . | trim | nindent 8 }}
      containers: {{- include "airflow.git.containers.sync" . | trim | nindent 8 }}
        - name: airflow-worker
          image: {{ include "airflow.workerImage" . }}
          imagePullPolicy: {{ .Values.workerImage.pullPolicy | quote }}
          {{- if .Values.airflow.worker.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.airflow.worker.command "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.airflow.worker.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.airflow.worker.args "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.airflow.worker.resources }}
          resources: {{- toYaml .Values.airflow.worker.resources | nindent 12 }}
          {{- end }}
          env:
            {{- include "airflow.configure.airflow.common"  . | nindent 12 }}
            {{- include "airflow.configure.database" . | nindent 12 }}
            {{- include "airflow.configure.redis" . | nindent 12 }}
            {{- if .Values.airflow.extraEnvVars }}
              {{ toYaml .Values.airflow.extraEnvVars | nindent 12 }}
            {{- end }}
            {{- if .Values.airflow.worker.extraEnvVars }}
              {{- include "common.tplvalues.render" (dict "value" .Values.airflow.worker.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            {{- if .Values.airflow.extraEnvVarsCM }}
            - configMapRef:
                name: {{ .Values.airflow.extraEnvVarsCM }}
            {{- end }}
            {{- if .Values.airflow.extraEnvVarsSecret }}
            - secretRef:
                name: {{ .Values.airflow.extraEnvVarsSecret }}
            {{- end }}
            {{- if .Values.airflow.worker.extraEnvVarsCM }}
            - configMapRef:
                name: {{ .Values.airflow.worker.extraEnvVarsCM }}
            {{- end }}
            {{- if .Values.airflow.worker.extraEnvVarsSecret }}
            - secretRef:
                name: {{ .Values.airflow.worker.extraEnvVarsSecret }}
            {{- end }}
          ports:
            - name: worker
              containerPort: {{ .Values.airflow.worker.port }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            tcpSocket:
              port: worker
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            tcpSocket:
              port: worker
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- end }}
          volumeMounts:
          {{- if .Files.Glob "files/dags/*.py" }}
            - name: local-dag-files
              mountPath: /opt/bitnami/airflow/dags/local
          {{- end }}
          {{- if .Values.airflow.dagsConfigMap }}
            - name: external-dag-files
              mountPath: /opt/bitnami/airflow/dags/external
          {{- end }}
          {{- if .Values.airflow.configurationConfigMap }}
            - name: custom-configuration-file
              mountPath: /opt/bitnami/airflow/airflow.cfg
              subPath: airflow.cfg
          {{- end }}
            {{- include "airflow.git.maincontainer.volumeMounts" . | trim | nindent 12 }}
          {{- if .Values.airflow.worker.extraVolumeMounts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.airflow.worker.extraVolumeMounts "context" $) | nindent 12 }}
          {{- end }}
      volumes:
      {{- if .Files.Glob "files/dags/*.py" }}
        - name: local-dag-files
          configMap:
            name: {{ include "common.names.fullname" . }}-dag-files
      {{- end }}
      {{- if .Values.airflow.dagsConfigMap }}
        - name: external-dag-files
          configMap:
            name: {{ .Values.airflow.dagsConfigMap }}
      {{- end }}
      {{- if .Values.airflow.configurationConfigMap }}
        - name: custom-configuration-file
          configMap:
            name: {{ .Values.airflow.configurationConfigMap }}
      {{- end }}
        {{- include "airflow.git.volumes" . | trim | nindent 8 }}
      {{- if .Values.airflow.worker.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.airflow.worker.extraVolumes "context" $) | nindent 8 }}
      {{- end }}
