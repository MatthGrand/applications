## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry and imagePullSecrets
##
# global:
#   imageRegistry: myRegistryName
#   imagePullSecrets:
#     - myRegistryKeySecretName
#   storageClass: myStorageClass



## Bitnami Airflow image version
## ref: https://hub.docker.com/r/bitnami/airflow/tags/
##
image:
  registry: pilotyard.azurecr.io
  repository: cccs/airflow
  tag: latest
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: Always
  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ##
  # pullSecrets:
  #   - myRegistryKeySecretName

  ## Set to true if you would like to see extra information on logs
  ## It turns BASH and NAMI debugging in minideb
  ## ref:  https://github.com/bitnami/minideb-extras/#turn-on-bash-debugging
  debug: true

## Bitnami Airflow Scheduler image version
## ref: https://hub.docker.com/r/bitnami/airflow-scheduler/tags/
##
schedulerImage:
  registry: pilotyard.azurecr.io
  repository: cccs/airflow-scheduler
  tag: latest
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: Always
  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ##
  # pullSecrets:
  #   - myRegistryKeySecretName

  ## Set to true if you would like to see extra information on logs
  ## It turns BASH and NAMI debugging in minideb
  ## ref:  https://github.com/bitnami/minideb-extras/#turn-on-bash-debugging
  debug: false

## Bitnami Airflow Worker image version
## ref: https://hub.docker.com/r/bitnami/airflow-worker/tags/
##
workerImage:
  registry: pilotyard.azurecr.io
  repository: cccs/airflow-worker
  tag: latest
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: Always
  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ##
  # pullSecrets:
   

  ## Set to true if you would like to see extra information on logs
  ## It turns BASH and NAMI debugging in minideb
  ## ref:  https://github.com/bitnami/minideb-extras/#turn-on-bash-debugging
  debug: true

## Bitnami git image version
## ref: https://hub.docker.com/r/bitnami/git/tags/
##
git:
  registry: pilotyard.azurecr.io
  repository: cccs/git
  tag: latest
  pullPolicy: Always
  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ##
  # pullSecrets:
  #   - dag-clone-key
## String to partially override airflow.fullname template (will maintain the release name)
##
# nameOverride:

## String to fully override airflow.fullname template
##
# fullnameOverride:

## StatefulSet controller supports automated updates. There are two valid update strategies: RollingUpdate and OnDelete
## ref: https://kubernetes.io/docs/tutorials/stateful-application/basic-stateful-set/#updating-statefulsets
##
updateStrategy: RollingUpdate

## Partition update strategy
## https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#partitions
##
# rollingUpdatePartition:

## Airflow Components configuration
##
airflow:
  ## Name of an existing config map containing the Airflow config file
  ##
  # configurationConfigMap:
  ## Name of an existing config map containing all the DAGs files you want to load in Airflow.
  ##
  ## dagsConfigMap:
  ## Airflow generic configuration
  ##
  loadExamples: false
  ## Enable in order to download DAG files from git repository.
  ##
  cloneDagFilesFromGit:
    enabled: true
    repository: git@github.com:CybercentreCanada/airflow-dags.git
    branch: master
    interval: 10
    ## Name of secret in kubernetes containing the ssh keys for access to a git repo
    sshKeySecret: dag-clone-key
 ## URL used to access to airflow web ui
  ##
  baseUrl: http://my_host${AIRFLOW_INGRESS_URI}
  ## Airflow worker component configuration
  worker:
    port: 8793
    replicas: 1

  auth:
    ## Option to force users to specify a password. That is required for 'helm upgrade' to work properly.
    ## If it is not forced, a random password will be generated.
    ##
    forcePassword: false
    ## Specify username to acccess web UI
    ##
    username: user
    ## Specify password to acccess web UI
    ##
    password: test
    ## Specify a fernet key to secure airflow connections
    ## Fernet key must be 32 url-safe base64-encoded bytes.
    ## More info at:
    ## - https://airflow.readthedocs.io/en/stable/howto/secure-connections.html
    ## - https://bcb.github.io/airflow/fernet-key
    ##
    # fernetKey:
    ## Use existing secret (ignores previous password and fernetKey)
    ##
    # NOTE: this password is hard coded in the charts so don't try to change the name.
    existingSecret: ${AIRFLOW_RELEASE_NAME}-secrets

  ## All the parameters from the configuration file can be overwritten by using environment variables with this format:
  ## AIRFLOW__{SECTION}__{KEY}. Note the double underscores. More info at https://airflow.readthedocs.io/en/stable/howto/set-config.html
  ##
  extraEnvVars:
      - name: ARIFLOW__WEBSERVER__ENABLE_PROXY_FIX
        value: "True"
        # These are not working right now. I reported the issue to bitnami
        # instead we have hard coded these airflow.cfg changes
        # into the app-entrypoint.sh script
        # - name: AIRFLOW__WEBSERVER__AUTHENTICATE
        #   value: "True"
        # - name: AIRFLOW__WEBSERVER__AUTH_BACKEND
        #   value: "xuser-header-auth"
  pool:
    enabled: "true"
    name: "kubernetes"
    size: !!str "32"
    description: ""


## Kubernetes Security Context
## https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
##
securityContext:
  enabled: false
  fsGroup: 1000
  runAsUser: root 

## Kubernetes configuration
## For minikube, set this to NodePort, elsewhere use LoadBalancer
##
service:
  type: ClusterIP
  port: 8080

  ## Specify the NodePort value for the LoadBalancer and NodePort service types.
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
  ##
  # nodePort:

  ## Use loadBalancerIP to request a specific static IP,
  # loadBalancerIP:

  ## Service annotations done as key:value pairs
  annotations:

## Configure the ingress resource that allows you to access the
## Airflow installation. Set up the URL
## ref: http://kubernetes.io/docs/user-guide/ingress/
##
ingress:
  ## Set to true to enable ingress record generation
  enabled: true

  ## Set this to true in order to add the corresponding annotations for cert-manager
  certManager: true

  ## Ingress annotations done as key:value pairs
  ## For a full list of possible ingress annotations, please see
  ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
  ##
  ## If tls is set to true, annotation ingress.kubernetes.io/secure-backends: "true" will automatically be set
  ## If certManager is set to true, annotation kubernetes.io/tls-acme: "true" will automatically be set
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/auth-response-headers: "X-Auth-Request-User, X-Auth-Request-Email"
    nginx.ingress.kubernetes.io/auth-signin: "https://auth.pilot.aadtest.ca/oauth2/start?rd=%2F$server_name$escaped_request_uri"
    nginx.ingress.kubernetes.io/auth-url: "https://auth.pilot.aadtest.ca/oauth2/auth"
  
  ## The list of hostnames to be covered with this ingress record.
  ## Most likely this will be just one host, but in the event more hosts are needed, this is an array
  ##
  hosts:
  - name: airflow.pilot.aadtest.ca
    path: ${AIRFLOW_INGRESS_URI}

    ## Set this to true in order to enable TLS on the ingress record
    tls: true

    ## Optionally specify the TLS hosts for the ingress record
    ## Useful when the Ingress controller supports www-redirection
    ## If not specified, the above host name will be used
    # tlsHosts:
    # - www.airflow.local
    # - airflow.local

    ## If TLS is set to true, you must declare what secret will store the key/certificate for TLS
    tlsSecret: airflow.local-tls

  secrets:
  ## If you're providing your own certificates, please use this to add the certificates as secrets
  ## key and certificate should start with -----BEGIN CERTIFICATE----- or
  ## -----BEGIN RSA PRIVATE KEY-----
  ##
  ## name should line up with a tlsSecret set further up
  ## If you're using cert-manager, this is unneeded, as it will create the secret for you if it is not set
  ##
  ## It is also possible to create and manage the certificates outside of this helm chart
  ## Please see README.md for more information
  # - name: airflow.local-tls
  #   key:
  #   certificate:

## Node labels for pod assignment
## Ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}

## Tolerations for pod assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []

## Affinity for pod assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
##
affinity: {}

## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
#  limits:
#    cpu: 200m
#    memory: 1Gi
#  requests:
#    memory: 256Mi
#    cpu: 250m

## Configure extra options for liveness and readiness probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)
livenessProbe:
  enabled: true
  initialDelaySeconds: 180
  periodSeconds: 20
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

readinessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

##
## PostgreSQL chart configuration
##
## https://github.com/helm/charts/blob/master/stable/postgresql/values.yaml
##
postgresql:
  enabled: true
  postgresqlUsername: bn_airflow
  #postgresqlPassword:
  postgresqlDatabase: bitnami_airflow
#  nameOverride = 
  existingSecret: ${AIRFLOW_RELEASE_NAME}-postgresql

externalDatabase:
  ## All of these values are only used when postgresql.enabled is set to false
  ## Database host
  host: localhost
  ## non-root Username for Airflow Database
  user: bn_airflow
  ## Database password
  password: ""
  ## Database name
  database: bitnami_airflow
  ## Database port number
  port: 5432

##
## Redis chart configuration
##
## https://github.com/helm/charts/blob/master/stable/redis/values.yaml
##
redis:
  enabled: true
  # password: ""
  existingSecret: ${AIRFLOW_RELEASE_NAME}-redis

externalRedis:
  ## All of these values are only used when redis.enabled is set to false
  ## Redis host
  host: localhost
  ## Redis port number
  port: 6379
  ## Redis password
  password: ""

## Prometheus Exporter / Metrics
##
metrics:
  enabled: true

  image:
    registry: docker.io
    repository: bitnami/airflow-exporter
    tag: 0.20180711.0-debian-9-r67
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ##
    # pullSecrets:
    #   - myRegistryKeySecretName

  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9112"

  ## Metrics exporter resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  # resources: {}

  ## Metrics exporter labels and tolerations for pod assignment
  # nodeSelector: {"beta.kubernetes.io/arch": "amd64"}
  # tolerations: []

  ## Metrics exporter pod Annotation and Labels
  # podAnnotations: {}
  # podLabels: {}

additionalRepos:
  enabled: true
  repos:
  - name: notebooks
    repository: git@github.com:CybercentreCanada/jupyter-notebooks.git
    branch: "master"
    interval: 10
    sshKeySecret: airflow-clone-keys
workers:
  - name: "kubernetes"
    #volumes:
    #- name: "VOLUME-TEST1"
    #  emptyDir: {}
    #image:
    #  registry: "TEST REGISTRY"
    #  repository: "TEST REPOSITORY"
    #  tag: "TEST TAG"
    #  pullPolicy: "TEST POLICY"
    additionalRepos:
      enabled: true
      repos:
      - name: notebooks
        repository: git@github.com:CybercentreCanada/jupyter-notebooks.git
        branch: "master"
        interval: 10
        sshKeySecret: airflow-clone-keys
    replicas: 2
    queue: "kubernetes"
