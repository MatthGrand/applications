## @section Global parameters
## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass

## @param global.imageRegistry Global Docker image registry
## @param global.imagePullSecrets Global Docker registry secret names as an array
##
global:
  imageRegistry:
  ## E.g.
  ## imagePullSecrets:
  ##   - myRegistryKeySecretName
  ##
  imagePullSecrets: []

## @section Common parameters

## @param kubeVersion Force target Kubernetes version (using Helm capabilites if not set)
##
kubeVersion:
## @param nameOverride String to partially override aspnet-core.fullname template (will maintain the release name)
##
nameOverride:
## @param fullnameOverride String to fully override aspnet-core.fullname template
##
fullnameOverride:
## @param clusterDomain Default Kubernetes cluster domain
##
clusterDomain: cluster.local
## @param commonLabels Labels to add to all deployed objects
##
commonLabels: {}
## @param commonAnnotations Annotations to add to all deployed objects
##
commonAnnotations: {}
## @param extraDeploy Array of extra objects to deploy with the release
##
extraDeploy: []

## @section ASP.NET Core parameters

## Bitnami ASP.NET Core image
## ref: https://hub.docker.com/r/bitnami/aspnet-core/tags/
## @param image.registry ASP.NET Core image registry
## @param image.repository ASP.NET Core image name
## @param image.tag ASP.NET Core image tag
## @param image.pullPolicy ASP.NET Core image pull policy
## @param image.pullSecrets Specify docker-registry secret names as an array
##
image:
  registry: docker.io
  repository: bitnami/aspnet-core
  tag: 3.1.16-debian-10-r0
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: IfNotPresent
  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ## pullSecrets:
  ##   - myRegistryKeySecretName
  ##
  pullSecrets: []
## @param command Command for running the container (set to default if not set). Use array form
##
command: []
## @param args Args for running the container (set to default if not set). Use array form
##
args: []
## @param bindURLs URLs to bind
##
bindURLs: http://+:8080
## @param extraEnvVars Extra environment variables to be set on ASP.NET Core container
## E.g:
## extraEnvVars:
##   - name: FOO
##     value: BAR
##
extraEnvVars: []
## @param extraEnvVarsCM ConfigMap with extra environment variables
##
extraEnvVarsCM:
## @param extraEnvVarsSecret Secret with extra environment variables
##
extraEnvVarsSecret:

## @section ASP.NET Core deployment parameters

## @param hostAliases Deployment pod host aliases
## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
##
hostAliases: []
## @param replicaCount Number of ASP.NET Core replicas to deploy
##
replicaCount: 1
## @param strategyType Deployment Strategy Type, can be set to RollingUpdate or Recreate by default.
##
strategyType: RollingUpdate
## @param podAffinityPreset Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
## Allowed values: soft, hard
##
podAffinityPreset: ""
## @param podAntiAffinityPreset Pod anti-affinity preset
## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
## Allowed values: soft, hard
##
podAntiAffinityPreset: soft
## Node affinity preset
## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
## @param nodeAffinityPreset.type Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
## @param nodeAffinityPreset.key Node label key to match. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
## @param nodeAffinityPreset.values Node label values to match
##
nodeAffinityPreset:
  type: ""
  ## E.g.
  ## key: "kubernetes.io/e2e-az-name"
  ##
  key: ""
  ## E.g.
  ## values:
  ##   - e2e-az1
  ##   - e2e-az2
  ##
  values: []
## @param affinity Affinity for pod assignment. Evaluated as a template.
## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
##
affinity: {}
## @param nodeSelector Node labels for pod assignment. Evaluated as a template.
## ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}
## @param tolerations Tolerations for pod assignment. Evaluated as a template.
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []
## @param podAnnotations Annotations for ASP.NET Core pods
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
##
podAnnotations: {}
## @param priorityClassName ASP.NET Core pods' priority.
## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
##
priorityClassName: ""
## @param lifecycleHooks lifecycleHooks for the ASP.NET Core container to automate configuration before or after startup.
##
lifecycleHooks: {}
## ASP.NET Core pods' Security Context.
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
## @param podSecurityContext.enabled !!!!!
## @param podSecurityContext.sysctls !!!!!
##
podSecurityContext:
  enabled: false
  ## sysctl settings
  ## Example:
  ## sysctls:
  ## - name: net.core.somaxconn
  ##   value: "10000"
  ##
  sysctls: {}
## ASP.NET Core containers' Security Context (only main container).
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
## @param containerSecurityContext.enabled !!!!!
## @param containerSecurityContext.runAsUser !!!!!
##
containerSecurityContext:
  enabled: false
  runAsUser: 0
## @param containerPort Port to expose at container level
##
containerPort: 8080
## ASP.NET Core containers' resource requests and limits.
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
## We usually recommend not to specify default resources and to leave this as a conscious
## choice for the user. This also increases chances charts run on environments with little
## resources, such as Minikube. If you do want to specify resources, uncomment the following
## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
## @param resources.limits The resources limits for the ASP.NET Core container
## @param resources.requests The requested resources for the ASP.NET Core container
##
resources:
  ## Example:
  ## limits:
  ##    cpu: 100m
  ##    memory: 128Mi
  limits: {}
  ## Examples:
  ## requests:
  ##    cpu: 100m
  ##    memory: 128Mi
  requests: {}
## ASP.NET Core pods' liveness probe. Evaluated as a template.
## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
## @param livenessProbe.enabled Enable livenessProbe
## @param livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
## @param livenessProbe.periodSeconds Period seconds for livenessProbe
## @param livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
## @param livenessProbe.failureThreshold Failure threshold for livenessProbe
## @param livenessProbe.successThreshold Success threshold for livenessProbe
##
livenessProbe:
  enabled: true
  initialDelaySeconds: 10
  timeoutSeconds: 1
  periodSeconds: 20
  failureThreshold: 6
  successThreshold: 1
## ASP.NET Core pods' readiness probe. Evaluated as a template.
## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
## @param readinessProbe.enabled Enable readinessProbe
## @param readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
## @param readinessProbe.periodSeconds Period seconds for readinessProbe
## @param readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
## @param readinessProbe.failureThreshold Failure threshold for readinessProbe
## @param readinessProbe.successThreshold Success threshold for readinessProbe
##
readinessProbe:
  enabled: true
  initialDelaySeconds: 10
  timeoutSeconds: 1
  periodSeconds: 20
  failureThreshold: 6
  successThreshold: 1
## @param customLivenessProbe Custom Liveness probes for ASP.NET Core pods
##
customLivenessProbe: {}
## @param customReadinessProbe Custom Rediness probes ASP.NET Core pods
##
customReadinessProbe: {}
## @param extraVolumeMounts Optionally specify extra list of additional volumeMounts for ASP.NET Core container
## Example:
## extraVolumeMounts:
##   - name: extras
##     mountPath: /usr/share/extras
##     readOnly: true
##
extraVolumeMounts: []
## @param extraVolumes Optionally specify extra list of additional volumes for ASP.NET Core statefulset
## Example:
## extraVolumes:
##   - name: extras
##     emptyDir: {}
##
extraVolumes: []
## @param initContainers Add additional init containers to the ASP.NET Core pods
## Example:
## initContainers:
##   - name: your-image-name
##     image: your-image
##     imagePullPolicy: Always
##     ports:
##       - name: portname
##         containerPort: 1234
##
initContainers: {}
## @param sidecars Add additional sidecar containers to the ASP.NET Core pods
## Example:
## sidecars:
##   - name: your-image-name
##     image: your-image
##     imagePullPolicy: Always
##     ports:
##       - name: portname
##         containerPort: 1234
##
sidecars: {}
## ASP.NET Core Pod Disruption Budget configuration
## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
## @param pdb.create Enable/disable a Pod Disruption Budget creation
## @param pdb.minAvailable Minimum number/percentage of pods that should remain scheduled
## @param pdb.maxUnavailable Maximum number/percentage of pods that may be made unavailable
##
pdb:
  create: false
  minAvailable: 1
  maxUnavailable:
## ASP.NET Core Autoscaling parameters.
## @param autoscaling.enabled Enable autoscaling for ASP.NET Core
## @param autoscaling.minReplicas Minimum number of ASP.NET Core replicas
## @param autoscaling.maxReplicas Maximum number of ASP.NET Core replicas
## @param autoscaling.targetCPU Target CPU utilization percentage
## @param autoscaling.targetMemory Target Memory utilization percentage
##
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 11
  targetCPU:
  targetMemory:

## @section Custom ASP.NET Core application parameters

## Enable to download/build ASP.NET Core app from external git repository.
## Do not enable it if your docker image already includes your application
##
appFromExternalRepo:
  ## @param appFromExternalRepo.enabled Enable to download/build ASP.NET Core app from external git repository
  ##
  enabled: true
  clone:
    ## Bitnami Git image version
    ## ref: https://hub.docker.com/r/bitnami/git/tags/
    ## @param appFromExternalRepo.clone.image.registry Git image registry
    ## @param appFromExternalRepo.clone.image.repository Git image name
    ## @param appFromExternalRepo.clone.image.tag Git image tag
    ## @param appFromExternalRepo.clone.image.pullPolicy Git image pull policy
    ## @param appFromExternalRepo.clone.image.pullSecrets Specify docker-registry secret names as an array
    ##
    image:
      registry: docker.io
      repository: bitnami/git
      tag: 2.32.0-debian-10-r1
      ## Specify a imagePullPolicy
      ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
      ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
      ##
      pullPolicy: IfNotPresent
      ## Optionally specify an array of imagePullSecrets.
      ## Secrets must be manually created in the namespace.
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
      ## e.g:
      ## pullSecrets:
      ##   - myRegistryKeySecretName
      ##
      pullSecrets: []
    ## @param appFromExternalRepo.clone.repository Git repository to clone
    ##
    repository: https://github.com/dotnet/AspNetCore.Docs.git
    ## @param appFromExternalRepo.clone.revision Git revision to checkout
    ##
    revision: main
    ## @param appFromExternalRepo.clone.extraVolumeMounts Add extra volume mounts for the GIT container
    ## Useful to mount keys to connect through ssh. (normally used with extraVolumes)
    ## E.g:
    ## extraVolumeMounts:
    ##   - name: ssh-dir
    ##     mountPath: /root/.ssh/
    ##
    extraVolumeMounts: []
  publish:
    ## Bitnami .NET SDK image version
    ## ref: https://hub.docker.com/r/bitnami/dotnet-sdk/tags/
    ## @param appFromExternalRepo.publish.image.registry .NET SDK image registry
    ## @param appFromExternalRepo.publish.image.repository .NET SDK Image name
    ## @param appFromExternalRepo.publish.image.tag .NET SDK Image tag
    ## @param appFromExternalRepo.publish.image.pullPolicy .NET SDK image pull policy
    ## @param appFromExternalRepo.publish.image.pullSecrets Specify docker-registry secret names as an array
    ##
    image:
      registry: docker.io
      repository: bitnami/dotnet-sdk
      tag: 3.1.409-debian-10-r24
      ## Specify a imagePullPolicy
      ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
      ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
      ##
      pullPolicy: IfNotPresent
      ## Optionally specify an array of imagePullSecrets.
      ## Secrets must be manually created in the namespace.
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
      ## e.g:
      ## pullSecrets:
      ##   - myRegistryKeySecretName
      ##
      pullSecrets: []
    ## @param appFromExternalRepo.publish.subFolder Sub folder under the Git repository containing the ASP.NET Core app
    ##
    subFolder: aspnetcore/fundamentals/servers/kestrel/samples/3.x/KestrelSample
    ## @param appFromExternalRepo.publish.extraFlags Extra flags to be appended to "dotnet publish" command
    ##
    extraFlags: []
  ## @param appFromExternalRepo.startCommand Command used to start ASP.NET Core app
  ##
  startCommand: ["dotnet", "KestrelSample.dll"]
## Enable mounting your ASP.NET Core app from an existing PVC
## Do not enable it if your docker image already includes your application
## @param appFromExistingPVC.enabled Enable mounting your ASP.NET Core app from an existing PVC
## @param appFromExistingPVC.existingClaim A existing Persistent Volume Claim containing your ASP.NET Core app
##
appFromExistingPVC:
  enabled: false
  ## PVC must be created manually before volume will be bound. The value is evaluated as a template
  ##
  existingClaim:

## @section Exposure parameters

## ASP.NET Core Service parameters.
##
service:
  ## @param service.type Kubernetes service type
  ##
  type: ClusterIP
  ## @param service.port Service HTTP port
  ##
  port: 80
  ## @param service.nodePort Specify the nodePort value for the LoadBalancer and NodePort service types.
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
  ##
  nodePort:
  ## @param service.clusterIP Service clusterIP.
  ##
  clusterIP:
  ## @param service.externalTrafficPolicy Enable client source IP preservation
  ## ref http://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
  ##
  externalTrafficPolicy: Cluster
  ## @param service.loadBalancerIP Set the LoadBalancer service type to internal only.
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
  ##
  loadBalancerIP:
  ## @param service.loadBalancerSourceRanges Load Balancer sources.
  ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
  ## e.g:
  ## loadBalancerSourceRanges:
  ##   - 10.10.10.0/24
  ##
  loadBalancerSourceRanges: []
  ## @param service.annotations Provide any additional annotations for ASP.NET Core service that may be required. Evaluated as a template.
  ##
  annotations: {}
## Configure the ingress resource that allows you to access to you ASP.NET Core app
##
ingress:
  ## @param ingress.enabled Set to true to enable ingress record generation
  ##
  enabled: false
  ## @param ingress.apiVersion Override API Version (automatically detected if not set)
  ##
  apiVersion:
  ## @param ingress.path Ingress path
  ##
  path: /
  ## @param ingress.pathType Ingress path type
  ##
  pathType: ImplementationSpecific
  ## @param ingress.certManager Set this to true in order to add the corresponding annotations for cert-manager
  ##
  certManager: false
  ## @param ingress.hostname Default host for the ingress resource, a host pointing to this will be created
  ##
  hostname: aspnet-core.local
  ## @param ingress.annotations Ingress annotations done as key:value pairs
  ## For a full list of possible ingress annotations, please see
  ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
  ##
  ## If certManager is set to true, annotation kubernetes.io/tls-acme: "true" will automatically be set
  ##
  annotations: {}
  ## @param ingress.tls Enable TLS configuration for the hostname defined at ingress.hostname parameter
  ## TLS certificates will be retrieved from a TLS secret with name: {{- printf "%s-tls" .Values.ingress.hostname }}
  ## You can use the ingress.secrets parameter to create this TLS secret, relay on cert-manager to create it, or
  ## let the chart create self-signed certificates for you
  ##
  tls: false
  ## @param ingress.extraHosts The list of additional hostnames to be covered with this ingress record.
  ## Most likely the hostname above will be enough, but in the event more hosts are needed, this is an array
  ## extraHosts:
  ## - name: aspnet-core.local
  ##   path: /
  ##
  extraHosts: []
  ## @param ingress.extraTls The tls configuration for additional hostnames to be covered with this ingress record.
  ## see: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
  ## extraTls:
  ## - hosts:
  ##     - aspnet-core.local
  ##   secretName: aspnet-core.local-tls
  ##
  extraTls: []
  ## @param ingress.secrets If you're providing your own certificates, please use this to add the certificates as secrets
  ## key and certificate should start with -----BEGIN CERTIFICATE----- or -----BEGIN RSA PRIVATE KEY-----
  ## name should line up with a secretName set further up
  ##
  ## If it is not set and you're using cert-manager, this is unneeded, as it will create the secret for you
  ## If it is not set and you're NOT using cert-manager either, self-signed certificates will be created
  ## It is also possible to create and manage the certificates outside of this helm chart
  ## Please see README.md for more information
  ## Example:
  ## - name: aspnet-core.local-tls
  ##   key:
  ##   certificate:
  ##
  secrets: []
## Health Ingress
##
healthIngress:
  ## @param healthIngress.enabled Enable healthIngress controller resource
  ##
  enabled: false
  ## @param healthIngress.certManager Set this to true in order to add the corresponding annotations for cert-manager
  ##
  certManager: false
  ## @param healthIngress.hostname When the heallth ingress is enabled, a host pointing to this will be created
  ##
  hostname: aspnet-core.local
  ## @param healthIngress.annotations Ingress annotations done as key:value pairs
  ## For a full list of possible ingress annotations, please see
  ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
  ##
  ## If certManager is set to true, annotation kubernetes.io/tls-acme: "true" will automatically be set
  ##
  annotations: {}
  ## @param healthIngress.tls Enable TLS configuration for the hostname defined at ingress.hostname parameter
  ## TLS certificates will be retrieved from a TLS secret with name: {{- printf "%s-tls" .Values.ingress.hostname }}
  ## You can use the ingress.secrets parameter to create this TLS secret, relay on cert-manager to create it, or
  ## let the chart create self-signed certificates for you
  ##
  tls: false
  ## @param healthIngress.extraHosts The list of additional hostnames to be covered with this heallth ingress record.
  ## Most likely the hostname above will be enough, but in the event more hosts are needed, this is an array
  ## extraHosts:
  ## - name: aspnet-core.local
  ##   path: /
  ##
  extraHosts: []
  ## @param healthIngress.extraTls The tls configuration for additional hostnames to be covered with this heallth ingress record.
  ## see: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
  ## extraTls:
  ## - hosts:
  ##     - aspnet-core.local
  ##   secretName: aspnet-core.local-tls
  ##
  extraTls: []
  ## @param healthIngress.secrets If you're providing your own certificates, please use this to add the certificates as secrets
  ## key and certificate should start with -----BEGIN CERTIFICATE----- or -----BEGIN RSA PRIVATE KEY-----
  ## name should line up with a secretName set further up
  ##
  ## If it is not set and you're using cert-manager, this is unneeded, as it will create the secret for you
  ## If it is not set and you're NOT using cert-manager either, self-signed certificates will be created
  ## It is also possible to create and manage the certificates outside of this helm chart
  ## Please see README.md for more information
  ## Example:
  ## - name: aspnet-core.local-tls
  ##   key:
  ##   certificate:
  ##
  secrets: []

## @section RBAC parameters

## K8s Service Account.
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
##
serviceAccount:
  ## @param serviceAccount.create Enable the creation of a ServiceAccount for ASP.NET Core pods
  ##
  create: true
  ## @param serviceAccount.name The name of the ServiceAccount to use.
  ## If not set and create is true, a name is generated using the aspnet-core.fullname template
  ##
  name:
  ## @param serviceAccount.annotations Annotations for ASP.NET Core ServiceAccount
  ##
  annotations: {}
