{{- if and (include "discourse.host" .) (.Values.postgresql.enabled) -}}

{{- if empty (include "discourse.host" .) -}}
###############################################################################
### ERROR: You did not provide an external host in your 'helm install' call ###
###############################################################################

This deployment will be incomplete until you configure Discourse with a resolvable host. To configure Discourse with the URL of your service:

1. Get the discourse URL by running:

  {{- if contains "NodePort" .Values.service.type }}

  export APP_PORT=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ template "discourse.fullname" . }} -o jsonpath="{.spec.ports[0].nodePort}")
  export APP_HOST=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")

  {{- else if contains "LoadBalancer" .Values.service.type }}

  NOTE: It may take a few minutes for the LoadBalancer IP to be available.
        Watch the status with: 'kubectl get svc --namespace {{ .Release.Namespace }} -w {{ template "discourse.fullname" . }}'

  export APP_HOST=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ template "discourse.fullname" . }} --template "{{ "{{ range (index .status.loadBalancer.ingress 0) }}{{ . }}{{ end }}" }}")
  export APP_PASSWORD=$(kubectl get secret --namespace {{ .Release.Namespace }} {{ template "discourse.fullname" . }} -o jsonpath="{.data.discourse-password}" | base64 --decode)
  {{- if .Values.postgresql.postgresqlPostgresPassword }}
  export DATABASE_ROOT_PASSWORD=$(kubectl get secret --namespace {{ .Release.Namespace }} {{ template "discourse.postgresql.fullname" . }} -o jsonpath="{.data.postgresql-postgresql-postgres-password}" | base64 --decode)
  {{- end }}
  {{- end }}
  export APP_DATABASE_PASSWORD=$(kubectl get secret --namespace {{ .Release.Namespace }} {{ template "discourse.postgresql.fullname" . }} -o jsonpath="{.data.postgresql-postgresql-password}" | base64 --decode)

2. Complete your Discourse deployment by running:

{{- if .Values.postgresql.enabled }}

  helm upgrade {{ .Release.Name }} bitnami/{{ .Chart.Name }} \
    --set discourseHost=$APP_HOST,discoursePassword=$APP_PASSWORD{{ if .Values.postgresql.postgresqlPostgresPassword }},postgresql.postgresqlPostgresPassword=$DATABASE_ROOT_PASSWORD{{ end }},postgresql.postgresqlPassword=$APP_DATABASE_PASSWORD{{- if .Values.global }}{{- if .Values.global.imagePullSecrets }},global.imagePullSecrets={{ .Values.global.imagePullSecrets }}{{- end }}{{- end }}
{{- else }}

  ## PLEASE UPDATE THE EXTERNAL DATABASE CONNECTION PARAMETERS IN THE FOLLOWING COMMAND AS NEEDED ##

  helm upgrade {{ .Release.Name }} bitnami/{{ .Chart.Name }} \
    --set discoursePassword=$APP_PASSWORD,discourseHost=$APP_HOST,service.type={{ .Values.service.type }},postgresql.enabled=false{{- if not (empty .Values.externalDatabase.host) }},externalDatabase.host={{ .Values.externalDatabase.host }}{{- end }}{{- if not (empty .Values.externalDatabase.user) }},externalDatabase.user={{ .Values.externalDatabase.user }}{{- end }}{{- if not (empty .Values.externalDatabase.password) }},externalDatabase.password={{ .Values.externalDatabase.password }}{{- end }}{{- if not (empty .Values.externalDatabase.database) }},externalDatabase.database={{ .Values.externalDatabase.database }}{{- end }}{{- if .Values.global }}{{- if .Values.global.imagePullSecrets }},global.imagePullSecrets={{ .Values.global.imagePullSecrets }}{{- end }}{{- end }}
{{- end }}

{{- else -}}
1. Get the Discourse URL by running:

{{- if eq .Values.service.type "ClusterIP" }}

  echo "Store URL: http://127.0.0.1:8080/"
  echo "Admin URL: http://127.0.0.1:8080/{{ .Values.discourseAdminUri }}"
  kubectl port-forward --namespace {{ .Release.Namespace }} svc/{{ template "discourse.fullname" . }} 8080:{{ .Values.service.port }}

{{- else }}

{{- $port:=.Values.service.port | toString }}
  echo Store URL : http://{{ include "discourse.host" . }}{{- if ne $port "80" }}:{{ .Values.service.port }}{{ end }}/
  echo Admin URL : http://{{ include "discourse.host" . }}{{- if ne $port "80" }}:{{ .Values.service.port }}{{ end }}/{{ .Values.discourseAdminUri }}

{{- end }}

2. Get your Discourse login credentials by running:

  echo Username: {{ .Values.discourseUsername }}
  echo Password: $(kubectl get secret --namespace {{ .Release.Namespace }} {{ template "discourse.fullname" . }} -o jsonpath="{.data.discourse-password}" | base64 --decode)
{{- end }}

{{- else -}}

########################################################################################
### ERROR: You did not provide an external database host in your 'helm install' call ###
########################################################################################

This deployment will be incomplete until you configure Discourse with a resolvable database host. To configure Discourse to use and external database host:

1. Complete your Discourse deployment by running:

{{- if contains "NodePort" .Values.service.type }}
  export APP_HOST=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
{{- else if contains "LoadBalancer" .Values.service.type }}

  NOTE: It may take a few minutes for the LoadBalancer IP to be available.
        Watch the status with: 'kubectl get svc --namespace {{ .Release.Namespace }} -w {{ template "discourse.fullname" . }}'

  export APP_HOST=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ template "discourse.fullname" . }} --template "{{ "{{ range (index .status.loadBalancer.ingress 0) }}{{ . }}{{ end }}" }}")
{{- else }}

  export APP_HOST=127.0.0.1
{{- end }}
  export APP_PASSWORD=$(kubectl get secret --namespace {{ .Release.Namespace }} {{ template "discourse.fullname" . }} -o jsonpath="{.data.discourse-password}" | base64 --decode)

  ## PLEASE UPDATE THE EXTERNAL DATABASE CONNECTION PARAMETERS IN THE FOLLOWING COMMAND AS NEEDED ##

  helm upgrade {{ .Release.Name }} bitnami/{{ .Chart.Name }} \
    --set discoursePassword=$APP_PASSWORD,discourseHost=$APP_HOST,service.type={{ .Values.service.type }},postgresql.enabled=false{{- if not (empty .Values.externalDatabase.user) }},externalDatabase.user={{ .Values.externalDatabase.user }}{{- end }}{{- if not (empty .Values.externalDatabase.password) }},externalDatabase.password={{ .Values.externalDatabase.password }}{{- end }}{{- if not (empty .Values.externalDatabase.database) }},externalDatabase.database={{ .Values.externalDatabase.database }}{{- end }},externalDatabase.host=YOUR_EXTERNAL_DATABASE_HOST{{- if .Values.global }}{{- if .Values.global.imagePullSecrets }},global.imagePullSecrets={{ .Values.global.imagePullSecrets }}{{- end }}{{- end }}
{{- end }}

{{- if and (contains "bitnami/" .Values.image.repository) (not (.Values.image.tag | regexFind "-r\\d+$")) }}

WARNING: Rolling tag detected ({{ .Values.image.repository }}:{{ .Values.image.tag }}), please note that it is strongly recommended to avoid using rolling tags in a production environment.
+info https://docs.bitnami.com/containers/how-to/understand-rolling-tags-containers/

{{- end }}
