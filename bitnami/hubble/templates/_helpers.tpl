{{/*
Copyright Broadcom, Inc. All Rights Reserved.
SPDX-License-Identifier: APACHE-2.0
*/}}

{{/*
Return the proper Hubble Relay fullname
*/}}
{{- define "hubble.relay.fullname" -}}
{{- printf "%s-relay" (include "common.names.fullname" .) | trunc 63 | trimSuffix "-" -}}
{{- end -}}

{{/*
Return the proper Hubble Relay fullname
*/}}
{{- define "hubble.ui.fullname" -}}
{{- printf "%s-ui" (include "common.names.fullname" .) | trunc 63 | trimSuffix "-" -}}
{{- end -}}

{{/*
Return the proper Hubble Relay image name
*/}}
{{- define "hubble.relay.image" -}}
{{ include "common.images.image" (dict "imageRoot" .Values.relay.image "global" .Values.global) }}
{{- end -}}

{{/*
Return the proper Hubble UI Frontend image name
*/}}
{{- define "hubble.ui.frontend.image" -}}
{{ include "common.images.image" (dict "imageRoot" .Values.ui.frontend.image "global" .Values.global) }}
{{- end -}}

{{/*
Return the proper Hubble UI Backend image name
*/}}
{{- define "hubble.ui.backend.image" -}}
{{ include "common.images.image" (dict "imageRoot" .Values.ui.backend.image "global" .Values.global) }}
{{- end -}}

{{/*
Return the proper Docker Image Registry Secret Names
*/}}
{{- define "hubble.imagePullSecrets" -}}
{{- include "common.images.renderPullSecrets" (dict "images" (list .Values.relay.image .Values.ui.frontend.image .Values.ui.backend.image) "context" $) -}}
{{- end -}}

{{/*
Create the name of the service account to use for Hubble Relay
*/}}
{{- define "hubble.relay.serviceAccountName" -}}
{{- if .Values.relay.serviceAccount.create -}}
    {{ default (include "hubble.relay.fullname" .) .Values.relay.serviceAccount.name }}
{{- else -}}
    {{ default "default" .Values.relay.serviceAccount.name }}
{{- end -}}
{{- end -}}

{{/*
Create the name of the service account to use for Hubble UI
*/}}
{{- define "hubble.ui.serviceAccountName" -}}
{{- if .Values.ui.serviceAccount.create -}}
    {{ default (include "hubble.ui.fullname" .) .Values.ui.serviceAccount.name }}
{{- else -}}
    {{ default "default" .Values.ui.serviceAccount.name }}
{{- end -}}
{{- end -}}

{{/*
Return the Hubble Relay configuration configmap.
*/}}
{{- define "hubble.relay.configmapName" -}}
{{- if .Values.relay.existingConfigmap -}}
    {{- print (tpl .Values.relay.existingConfigmap $) -}}
{{- else -}}
    {{- print (include "hubble.relay.fullname" .) -}}
{{- end -}}
{{- end -}}

{{/*
Return the name of the secret containing the TLS CA
*/}}
{{- define "hubble.tls.caSecretName" -}}
{{- if or .Values.tls.autoGenerated.enabled (not (empty .Values.tls.ca)) -}}
    {{- printf "%s-ca-crt" (include "common.names.fullname" .) -}}
{{- else -}}
    {{- required "An existing CA secret name must be provided if CA cert is not provided!" (tpl .Values.tls.existingCASecret .) -}}
{{- end -}}
{{- end -}}

{{/*
Return the name of the secret containing the TLS certificates for Hubble Relay
*/}}
{{- define "hubble.tls.relay.secretName" -}}
{{- if or .Values.tls.autoGenerated.enabled (and (not (empty .Values.tls.relay.cert)) (not (empty .Values.tls.relay.key))) -}}
    {{- printf "%s-crt" (include "hubble.relay.fullname" .) -}}
{{- else -}}
    {{- required "An existing secret name must be provided with TLS certs for Relay if cert and key are not provided!" (tpl .Values.tls.relay.existingSecret .) -}}
{{- end -}}
{{- end -}}

{{/*
Return the name of the secret containing the TLS certificates for Hubble Relay client(s)
*/}}
{{- define "hubble.tls.client.secretName" -}}
{{- if or .Values.tls.autoGenerated.enabled (and (not (empty .Values.tls.client.cert)) (not (empty .Values.tls.client.key))) -}}
    {{- printf "%s-client-crt" (include "common.names.fullname" .) -}}
{{- else -}}
    {{- required "An existing secret name must be provided with TLS certs for Relay client(s) if cert and key are not provided!" (tpl .Values.tls.client.existingSecret .) -}}
{{- end -}}
{{- end -}}

{{/*
Return the name of the secret containing the TLS certificates for Hubble Server peers
*/}}
{{- define "hubble.serverPeers.tls.secretName" -}}
{{- if and (not (empty .Values.serverPeers.tls.cert)) (not (empty .Values.serverPeers.tls.key)) -}}
    {{- printf "%s-peers-crt" (include "common.names.fullname" .) -}}
{{- else -}}
    {{- required "An existing secret name must be provided with TLS certs for Server peers if cert and key are not provided!" (tpl .Values.serverPeers.tls.existingSecret .) -}}
{{- end -}}
{{- end -}}

{{/*
Compile all warnings into a single message.
*/}}
{{- define "hubble.validateValues" -}}
{{- $messages := list -}}
{{- $messages := append $messages (include "hubble.validateValues.relay.serviceMonitor" .) -}}
{{- $messages := append $messages (include "hubble.validateValues.tls" .) -}}
{{- $messages := without $messages "" -}}
{{- $message := join "\n" $messages -}}

{{- if $message -}}
{{-   printf "\nVALUES VALIDATION:\n%s" $message -}}
{{- end -}}
{{- end -}}

{{/*
Validate values of Hubble - ServiceMonitor for Relay
*/}}
{{- define "hubble.validateValues.relay.serviceMonitor" -}}
{{- if and (not .Values.relay.metrics.enabled) .Values.relay.metrics.serviceMonitor.enabled -}}
relay.metrics.serviceMonitor.enabled
    A ServiceMonitor for Prometheus Operatos is enabled but metrics are disabled.
    In order to prevent Prometheus from scraping an empty endpoint, the ServiceMonitor resource
    will be skipped. To enable the ServiceMonitor, also set `relay.metrics.enabled` to `true`.
{{- end -}}
{{- end -}}

{{/*
Validate values of Hubble - TLS
*/}}
{{- define "hubble.validateValues.tls" -}}
{{- if and .Values.tls.enabled .Values.tls.autoGenerated.enabled -}}
{{- if or (not (empty .Values.tls.ca)) (not (empty .Values.tls.relay.cert)) (not (empty .Values.tls.relay.key)) (not (empty .Values.tls.client.cert)) (not (empty .Values.tls.client.key)) -}}
tls.autoGenerated
    When enabling auto-generated TLS certificates, all certificate and key fields must be empty.
    Please disable auto-generated TLS certificates (--set tls.autoGenerated.enabled=false) or
    remove the certificate and key fields.
{{- end -}}
{{- if or (not (empty .Values.tls.existingCASecret) ) (not (empty .Values.tls.relay.existingSecret)) (not (empty .Values.tls.client.existingSecret)) -}}
tls.autoGenerated
    When enabling auto-generated TLS certificates, all existing secret fields must be empty.
    Please disable auto-generated TLS certificates (--set tls.autoGenerated.enabled=false) or
    remove the existing secret fields.
{{- end -}}
{{- if and (ne .Values.tls.autoGenerated.engine "helm") (ne .Values.tls.autoGenerated.engine "cert-manager") -}}
tls.autoGenerated.engine
    Invalid mechanism to generate the TLS certificates selected. Valid values are "helm" and
    "cert-manager". Please set a valid one (--set tls.autoGenerated.engine="xxx")
{{- end -}}
{{- end -}}
{{- end -}}
