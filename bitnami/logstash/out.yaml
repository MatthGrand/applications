NAME: charterito
LAST DEPLOYED: Mon Jul 26 12:48:11 2021
NAMESPACE: default
STATUS: pending-install
REVISION: 1
TEST SUITE: None
USER-SUPPLIED VALUES:
affinity: {}
clusterDomain: cluster.local
configFileName: logstash.conf
containerPorts:
- containerPort: 8080
  name: http
  protocol: TCP
- containerPort: 9600
  name: monitoring
  protocol: TCP
enableMonitoringAPI: true
enableMultiplePipelines: false
existingConfiguration: ""
extraDeploy: []
extraEnvVars: []
extraEnvVarsCM: ""
extraEnvVarsSecret: ""
extraVolumeMounts: []
extraVolumes: []
filter: ""
fullnameOverride: ""
global:
  imagePullSecrets: []
  imageRegistry: ""
hostAliases: []
image:
  debug: false
  pullPolicy: IfNotPresent
  pullSecrets: []
  registry: docker.io
  repository: bitnami/logstash
  tag: 7.13.4-debian-10-r0
ingress:
  annotations: {}
  apiVersion: ""
  certManager: false
  enabled: false
  extraHosts: []
  extraPaths: []
  extraTls: []
  hostname: logstash.local
  path: /
  pathType: ImplementationSpecific
  secrets: []
  tls: false
initContainers: []
input: |-
  # udp {
  #   port => 1514
  #   type => syslog
  # }
  # tcp {
  #   port => 1514
  #   type => syslog
  # }
  http { port => 8080 }
kubeVersion: ""
lifecycle: {}
livenessProbe:
  failureThreshold: 6
  httpGet:
    path: /
    port: monitoring
  initialDelaySeconds: 60
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5
metrics:
  enabled: false
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/logstash-exporter
    tag: 7.3.0-debian-10-r242
  livenessProbe:
    failureThreshold: ""
    httpGet:
      path: /metrics
      port: metrics
    initialDelaySeconds: 60
    periodSeconds: ""
    successThreshold: ""
    timeoutSeconds: ""
  readinessProbe:
    failureThreshold: ""
    httpGet:
      path: /metrics
      port: metrics
    initialDelaySeconds: 60
    periodSeconds: ""
    successThreshold: ""
    timeoutSeconds: ""
  resources:
    limits: {}
    requests: {}
  service:
    annotations:
      prometheus.io/path: /metrics
      prometheus.io/port: "9198"
      prometheus.io/scrape: "true"
    clusterIP: None
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nodePort: ""
    port: 9198
    type: ClusterIP
  serviceMonitor:
    enabled: false
    interval: ""
    namespace: ""
    scrapeTimeout: ""
    selector: {}
monitoringAPIPort: 9600
nameOverride: ""
nodeAffinityPreset:
  key: ""
  type: ""
  values: []
nodeSelector: {}
output: |-
  # elasticsearch {
  #   hosts => ["${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}"]
  #   manage_template => false
  #   index => "%{[@metadata][beat]}-%{+YYYY.MM.dd}"
  # }
  # gelf {
  #   host => "${GRAYLOG_HOST}"
  #   port => ${GRAYLOG_PORT}
  # }
  stdout {}
persistence:
  accessModes:
  - ReadWriteOnce
  annotations: {}
  enabled: false
  existingClaim: ""
  mountPath: /bitnami/logstash/data
  size: 2Gi
  storageClass: ""
podAffinityPreset: ""
podAnnotations: {}
podAntiAffinityPreset: soft
podDisruptionBudget:
  create: false
  maxUnavailable: ""
  minAvailable: 1
podManagementPolicy: OrderedReady
priorityClassName: ""
readinessProbe:
  failureThreshold: 6
  httpGet:
    path: /
    port: monitoring
  initialDelaySeconds: 60
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5
replicaCount: 1
resources:
  limits: {}
  requests: {}
securityContext:
  enabled: true
  fsGroup: 1001
  runAsUser: 1001
service:
  annotations: {}
  clusterIP: ""
  externalTrafficPolicy: ""
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  ports:
    http:
      port: 8080
      protocol: TCP
      targetPort: http
  type: ClusterIP
tolerations: []
updateStrategy: RollingUpdate
volumePermissions:
  enabled: false
  image:
    pullPolicy: Always
    pullSecrets: []
    registry: docker.io
    repository: bitnami/bitnami-shell
    tag: 10-debian-10-r138
  resources:
    limits: {}
    requests: {}
  securityContext:
    runAsUser: 0

COMPUTED VALUES:
affinity: {}
clusterDomain: cluster.local
common:
  exampleValue: common-chart
  global:
    imagePullSecrets: []
    imageRegistry: ""
configFileName: logstash.conf
containerPorts:
- containerPort: 8080
  name: http
  protocol: TCP
- containerPort: 9600
  name: monitoring
  protocol: TCP
enableMonitoringAPI: true
enableMultiplePipelines: false
existingConfiguration: ""
extraDeploy: []
extraEnvVars: []
extraEnvVarsCM: ""
extraEnvVarsSecret: ""
extraVolumeMounts: []
extraVolumes: []
filter: ""
fullnameOverride: ""
global:
  imagePullSecrets: []
  imageRegistry: ""
hostAliases: []
image:
  debug: false
  pullPolicy: IfNotPresent
  pullSecrets: []
  registry: docker.io
  repository: bitnami/logstash
  tag: 7.13.4-debian-10-r0
ingress:
  annotations: {}
  apiVersion: ""
  certManager: false
  enabled: false
  extraHosts: []
  extraPaths: []
  extraTls: []
  hostname: logstash.local
  path: /
  pathType: ImplementationSpecific
  secrets: []
  tls: false
initContainers: []
input: |-
  # udp {
  #   port => 1514
  #   type => syslog
  # }
  # tcp {
  #   port => 1514
  #   type => syslog
  # }
  http { port => 8080 }
kubeVersion: ""
lifecycle: {}
livenessProbe:
  failureThreshold: 6
  httpGet:
    path: /
    port: monitoring
  initialDelaySeconds: 60
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5
metrics:
  enabled: false
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/logstash-exporter
    tag: 7.3.0-debian-10-r242
  livenessProbe:
    failureThreshold: ""
    httpGet:
      path: /metrics
      port: metrics
    initialDelaySeconds: 60
    periodSeconds: ""
    successThreshold: ""
    timeoutSeconds: ""
  readinessProbe:
    failureThreshold: ""
    httpGet:
      path: /metrics
      port: metrics
    initialDelaySeconds: 60
    periodSeconds: ""
    successThreshold: ""
    timeoutSeconds: ""
  resources:
    limits: {}
    requests: {}
  service:
    annotations:
      prometheus.io/path: /metrics
      prometheus.io/port: "9198"
      prometheus.io/scrape: "true"
    clusterIP: None
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nodePort: ""
    port: 9198
    type: ClusterIP
  serviceMonitor:
    enabled: false
    interval: ""
    namespace: ""
    scrapeTimeout: ""
    selector: {}
monitoringAPIPort: 9600
nameOverride: ""
nodeAffinityPreset:
  key: ""
  type: ""
  values: []
nodeSelector: {}
output: |-
  # elasticsearch {
  #   hosts => ["${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}"]
  #   manage_template => false
  #   index => "%{[@metadata][beat]}-%{+YYYY.MM.dd}"
  # }
  # gelf {
  #   host => "${GRAYLOG_HOST}"
  #   port => ${GRAYLOG_PORT}
  # }
  stdout {}
persistence:
  accessModes:
  - ReadWriteOnce
  annotations: {}
  enabled: false
  existingClaim: ""
  mountPath: /bitnami/logstash/data
  size: 2Gi
  storageClass: ""
podAffinityPreset: ""
podAnnotations: {}
podAntiAffinityPreset: soft
podDisruptionBudget:
  create: false
  maxUnavailable: ""
  minAvailable: 1
podManagementPolicy: OrderedReady
priorityClassName: ""
readinessProbe:
  failureThreshold: 6
  httpGet:
    path: /
    port: monitoring
  initialDelaySeconds: 60
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5
replicaCount: 1
resources:
  limits: {}
  requests: {}
securityContext:
  enabled: true
  fsGroup: 1001
  runAsUser: 1001
service:
  annotations: {}
  clusterIP: ""
  externalTrafficPolicy: ""
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  ports:
    http:
      port: 8080
      protocol: TCP
      targetPort: http
  type: ClusterIP
tolerations: []
updateStrategy: RollingUpdate
volumePermissions:
  enabled: false
  image:
    pullPolicy: Always
    pullSecrets: []
    registry: docker.io
    repository: bitnami/bitnami-shell
    tag: 10-debian-10-r138
  resources:
    limits: {}
    requests: {}
  securityContext:
    runAsUser: 0

HOOKS:
MANIFEST:
---
# Source: logstash/templates/configuration-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: charterito-logstash
  labels:
    app.kubernetes.io/name: logstash
    helm.sh/chart: logstash-3.5.9
    app.kubernetes.io/instance: charterito
    app.kubernetes.io/managed-by: Helm
data:
  logstash.conf: |-
    input {
      # udp {
      #   port => 1514
      #   type => syslog
      # }
      # tcp {
      #   port => 1514
      #   type => syslog
      # }
      http { port => 8080 }
    }
    output {
      # elasticsearch {
      #   hosts => ["${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}"]
      #   manage_template => false
      #   index => "%{[@metadata][beat]}-%{+YYYY.MM.dd}"
      # }
      # gelf {
      #   host => "${GRAYLOG_HOST}"
      #   port => ${GRAYLOG_PORT}
      # }
      stdout {}
    }
---
# Source: logstash/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: charterito-logstash-headless
  labels:
    app.kubernetes.io/name: logstash
    helm.sh/chart: logstash-3.5.9
    app.kubernetes.io/instance: charterito
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http
  selector: 
    app.kubernetes.io/name: logstash
    app.kubernetes.io/instance: charterito
---
# Source: logstash/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: charterito-logstash
  labels:
    app.kubernetes.io/name: logstash
    helm.sh/chart: logstash-3.5.9
    app.kubernetes.io/instance: charterito
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http
  selector: 
    app.kubernetes.io/name: logstash
    app.kubernetes.io/instance: charterito
---
# Source: logstash/templates/sts.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: charterito-logstash
  labels:
    app.kubernetes.io/name: logstash
    helm.sh/chart: logstash-3.5.9
    app.kubernetes.io/instance: charterito
    app.kubernetes.io/managed-by: Helm
spec:
  serviceName: charterito-logstash-headless
  replicas: 1
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: logstash
      app.kubernetes.io/instance: charterito
  template:
    metadata:
      labels:
        app.kubernetes.io/name: logstash
        helm.sh/chart: logstash-3.5.9
        app.kubernetes.io/instance: charterito
        app.kubernetes.io/managed-by: Helm
      annotations:
        checksum/configuration: da15790b7a4744d2597a90576d2fe346be5d33874f85bf105379368f9e21e98d
    spec:
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: logstash
                    app.kubernetes.io/instance: charterito
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        runAsUser: 1001
        fsGroup: 1001
      containers:
        - name: logstash
          image: docker.io/bitnami/logstash:7.13.4-debian-10-r0
          imagePullPolicy: "IfNotPresent"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: LOGSTASH_CONF_FILENAME
              value: "logstash.conf"
            - name: LOGSTASH_ENABLE_MULTIPLE_PIPELINES
              value: "false"
            - name: LOGSTASH_EXPOSE_API
              value: "yes"
            - name: LOGSTASH_API_PORT_NUMBER
              value: "9600"
          envFrom:
          ports: 
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 9600
              name: monitoring
              protocol: TCP
          livenessProbe:
            failureThreshold: 6
            httpGet:
              path: /
              port: monitoring
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /
              port: monitoring
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: configurations
              mountPath: /bitnami/logstash/config
      volumes:
        - name: configurations
          configMap:
            name: charterito-logstash

NOTES:
** Please be patient while the chart is being deployed **

Logstash can be accessed through following DNS names from within your cluster:

    Logstash: charterito-logstash.default.svc.cluster.local

To access Logstash from outside the cluster execute the following commands:

    export SERVICE_PORT=$(kubectl get --namespace default -o jsonpath="{.spec.ports[0].port}" services charterito-logstash)
    kubectl port-forward svc/charterito-logstash ${SERVICE_PORT}:${SERVICE_PORT} &
    echo "http://127.0.0.1:${SERVICE_PORT}"
