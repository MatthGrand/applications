# Source: milvus/templates/index-node/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myml2-milvus-index-node
  namespace: "default"
  labels:
    app.kubernetes.io/instance: myml2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: milvus
    app.kubernetes.io/version: 2.2.14
    helm.sh/chart: milvus-5.0.0
    app.kubernetes.io/part-of: milvus
    app.kubernetes.io/component: index-node
spec:
  replicas: 1
  strategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: myml2
      app.kubernetes.io/name: milvus
      app.kubernetes.io/part-of: milvus
      app.kubernetes.io/component: index-node
  template:
    metadata:
      annotations:
        checksum/common-config: 1d718420d1d135b8a6c5de63a3432db00d66753ff5e7c2c437683a14be472202
        checksum/common-config-extra: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/config-extra: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
      labels:
        app.kubernetes.io/instance: myml2
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: milvus
        app.kubernetes.io/version: 2.2.14
        helm.sh/chart: milvus-5.0.0
        app.kubernetes.io/part-of: milvus
        app.kubernetes.io/component: index-node
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: myml2
                    app.kubernetes.io/name: milvus
                    app.kubernetes.io/component: index-node
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      initContainers:
        - name: wait-for-etcd
          image: docker.io/bitnami/os-shell:11-debian-11-r91
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          command:
            - bash
            - -ec
            - |
              #!/bin/bash
              retry_while() {
                local -r cmd="${1:?cmd is missing}"
                local -r retries="${2:-12}"
                local -r sleep_time="${3:-5}"
                local return_value=1
        
                read -r -a command <<< "$cmd"
                for ((i = 1 ; i <= retries ; i+=1 )); do
                    "${command[@]}" && return_value=0 && break
                    sleep "$sleep_time"
                done
                return $return_value
              }
        
              etcd_hosts=(
                "http://myml2-etcd:2379"
              )
        
              check_etcd() {
                  local -r etcd_host="${1:-?missing etcd}"
                  local params_cert=""
        
                  if echo $etcd_host | grep https; then
                     params_cert="--cacert /bitnami/milvus/conf/cert/etcd/client/ca.crt --cert /bitnami/milvus/conf/cert/etcd/client/tls.crt --key /bitnami/milvus/conf/cert/etcd/client/tls.key"
                  fi
                  if [ ! -z  ]; then
                    params_cert=$params_cert" --pass "
                  fi
                  if curl --max-time 5 "${etcd_host}/version" $params_cert | grep etcdcluster; then
                     return 0
                  else
                     return 1
                  fi
              }
        
              for host in "${etcd_hosts[@]}"; do
                  echo "Checking connection to $host"
                  if retry_while "check_etcd $host"; then
                      echo "Connected to $host"
                  else
                      echo "Error connecting to $host"
                      exit 1
                  fi
              done
        
              echo "Connection success"
              exit 0
        - name: wait-for-kafka
          image: docker.io/bitnami/milvus:2.3.3-debian-11-r1 
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          command:
            - bash
            - -ec
            - |
              #!/bin/bash
              retry_while() {
                local -r cmd="${1:?cmd is missing}"
                local -r retries="${2:-12}"
                local -r sleep_time="${3:-5}"
                local return_value=1
        
                read -r -a command <<< "$cmd"
                for ((i = 1 ; i <= retries ; i+=1 )); do
                    "${command[@]}" && return_value=0 && break
                    sleep "$sleep_time"
                done
                return $return_value
              }
        
              kafka_hosts=(
                "myml2-kafka"
              )
        
              check_kafka() {
                  local -r kafka_host="${1:-?missing kafka}"
                  if wait-for-port --timeout=5 --host=${kafka_host} --state=inuse 9092; then
                     return 0
                  else
                     return 1
                  fi
              }
        
              for host in "${kafka_hosts[@]}"; do
                  echo "Checking connection to $host"
                  if retry_while "check_kafka $host"; then
                      echo "Connected to $host"
                  else
                      echo "Error connecting to $host"
                      exit 1
                  fi
              done
        
              echo "Connection success"
              exit 0
        - name: wait-for-s3
          image: docker.io/bitnami/os-shell:11-debian-11-r91
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          command:
            - bash
            - -ec
            - |
              #!/bin/bash
              retry_while() {
                local -r cmd="${1:?cmd is missing}"
                local -r retries="${2:-12}"
                local -r sleep_time="${3:-5}"
                local return_value=1
        
                read -r -a command <<< "$cmd"
                for ((i = 1 ; i <= retries ; i+=1 )); do
                    "${command[@]}" && return_value=0 && break
                    sleep "$sleep_time"
                done
                return $return_value
              }
        
              check_s3() {
                  local -r s3_host="${1:-?missing s3}"
                  if curl --max-time 5 "${s3_host}" | grep "RequestId"; then
                     return 0
                  else
                     return 1
                  fi
              }
        
              host="myml2-minio"
        
              echo "Checking connection to $host"
              if retry_while "check_s3 $host"; then
                echo "Connected to $host"
              else
                echo "Error connecting to $host"
                exit 1
              fi
        
              echo "Connection success"
              exit 0
        # This init container renders and merges the Milvus configuration files.
        # We need to use a volume because we're working with ReadOnlyRootFilesystem
        - name: prepare-milvus
          image: docker.io/bitnami/milvus:2.3.3-debian-11-r1
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          command:
            - bash
            - -ec
            - |
              #!/bin/bash
              # Build final milvus.yaml with the sections of the different files
              cat <<EOF>/bitnami/milvus/rendered-conf/glog.conf
              # if true, only log to stdout
              --logtostdout=true
              --logtostderr=false
              --alsologtostderr=false
              # `INFO``, ``WARNING``, ``ERROR``, and ``FATAL`` are 0, 1, 2, and 3
              --minloglevel=0
              --log_dir=/var/lib/milvus/logs/
              # MB
              --max_log_size=200
              --stop_logging_if_full_disk=true
              EOF
              find /bitnami/milvus/conf -type f -name *.yaml -print0 | sort -z | xargs -0 yq eval-all '. as $item ireduce ({}; . * $item )' /opt/bitnami/milvus/configs/milvus.yaml > /bitnami/milvus/rendered-conf/pre-render-config_00.yaml
              # HACK: In order to enable Kafka we need to remove all Pulsar settings from the configuration file
              # https://github.com/milvus-io/milvus/blob/master/configs/milvus.yaml#L110
              yq 'del(.pulsar)' /bitnami/milvus/rendered-conf/pre-render-config_00.yaml > /bitnami/milvus/rendered-conf/pre-render-config_01.yaml
              render-template /bitnami/milvus/rendered-conf/pre-render-config_01.yaml > /bitnami/milvus/rendered-conf/milvus.yaml
              rm /bitnami/milvus/rendered-conf/pre-render-config*
              chmod 644 /bitnami/milvus/rendered-conf/milvus.yaml
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MILVUS_KAFKA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: myml2-kafka-user-passwords
                  key: system-user-password
            - name: MILVUS_S3_ACCESS_ID
              valueFrom:
                secretKeyRef:
                  name: myml2-minio
                  key: root-user
            - name: MILVUS_S3_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: myml2-minio
                  key: root-password
          envFrom:
          volumeMounts:
            - name: config-common
              mountPath: /bitnami/milvus/conf/00_default
            - name: component-config-default
              mountPath: /bitnami/milvus/conf/02_component_default
            - name: tmp
              mountPath: /tmp
            - name: rendered-config
              mountPath: /bitnami/milvus/rendered-conf/
      containers:
        - name: milvus
          image: docker.io/bitnami/milvus:2.3.3-debian-11-r1
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          args:
            - run
            - indexnode
          env:
            - name: METRICS_PORT
              value: "9091"
          envFrom:
          ports:
            - containerPort: 19530
              name: grpc
            - containerPort: 9091
              name: http-metrics
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: rendered-config
              mountPath: /opt/bitnami/milvus/configs
            - name: tmp
              mountPath: /tmp
            - name: tmp-milvus
              mountPath: /opt/bitnami/milvus/tmp
              # We are using a s3 backend, so this data dir is temporary
            - name: tmp-data-milvus
              mountPath: /bitnami/milvus/data
      volumes:
        - name: tmp-data-milvus
          emptyDir: {}
        - name: tmp-milvus
          emptyDir: {}
        - name: tmp
          emptyDir: {}
        - name: config-common
          configMap:
            name: myml2-milvus
        - name: component-config-default
          configMap:
            name: myml2-milvus-index-node
        - name: rendered-config
          emptyDir: {}