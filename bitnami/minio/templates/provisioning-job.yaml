{{- if .Values.provisioning.enabled }}
{{- $fullname := printf "%s-provisioning" (include "common.names.fullname" .) }}
{{- $releaseNamespace := .Release.Namespace }}
{{- $minioTarget := "provisioning" }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $fullname }}
  namespace: {{ $releaseNamespace  }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: minio-provisioning
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  annotations: 
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-delete-policy: before-hook-creation
    {{- if .Values.commonAnnotations }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
    {{- end }}
spec:
  template:
    metadata:
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        app.kubernetes.io/component: minio-provisioning
        {{- if .Values.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.podLabels "context" $) | nindent 8 }}
        {{- end }}
      {{- if .Values.provisioning.podAnnotations }}
      annotations:
        {{- include "common.tplvalues.render" ( dict "value" .Values.provisioning.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
    spec:
      {{- include "minio.imagePullSecrets" . | nindent 6 }}
      {{- if .Values.provisioning.schedulerName }}
      schedulerName: {{ .Values.provisioning.schedulerName }}
      {{- end }}
      restartPolicy: OnFailure
      terminationGracePeriodSeconds: 0
      serviceAccountName: {{ template "minio.serviceAccountName" . }}
      initContainers:
        - name: wait-for-available-minio
          # TODO: Add wait-for-port for minio image
          # {{ include "minio.image" . }}
          image: docker.io/bitnami/kafka:2.8.1-debian-10-r31
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          command:
            - /bin/bash
            - -c
            - >-
              set -e;
              echo "Waiting for Minio";
              wait-for-port \
                --host={{ include "common.names.fullname" . }} \
                --state=inuse \
                --timeout=120 \
                {{ .Values.service.ports.api | int64 }};
              echo "Minio is available";
      containers:
        - name: minio
          image: {{ include "minio.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          command:
            - /bin/bash
            - -c
            # TODO: credentials files?
            - >-
              set -ex;
              echo "Start Minio provisioning $MINIO_SCHEME $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD";

              mc alias set {{ $minioTarget }} $MINIO_SCHEME://{{ include "common.names.fullname" . }}:{{ .Values.service.ports.api }} $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD;

              {{ range $user := .Values.provisioning.users }}
              mc admin user add {{ $minioTarget }} {{ $user.username }} {{ $user.password }};
              {{ if $user.disabled }}
              mc admin user disable {{ $minioTarget }} {{ $user.username }};
              {{ else }}
              mc admin user enable {{ $minioTarget }} {{ $user.username }};
              {{ end }}
              {{ end }}

              {{ range $group := .Values.provisioning.groups }}
              mc admin group add {{ $minioTarget }} {{ $group.name }} {{ join " " $group.members }};
              {{ if $group.disabled }}
              mc admin group disable {{ $minioTarget }} {{ $group.name }};
              {{ else }}
              mc admin group enable {{ $minioTarget }} {{ $group.name }};
              {{ end }}
              {{ end }}

              {{ range $bucket := .Values.provisioning.buckets }}
              mc mb {{ $minioTarget }}/{{ $bucket.name }}
              --ignore-existing
              {{ with $bucket.region }}
              --region={{ . }}
              {{ end }}
              {{ if and $bucket.lock $bucket.lock.enabled }}
              --with-lock
              {{ end }}
              ;

              {{ if and $bucket.lock $bucket.lock.enabled }}
              {{ range $retention := $bucket.lock.retentions }}
              mc retention set
              {{ $retention.type }}
              {{ $retention.period }}
              {{ ternary (printf "%s/%s/%s" $minioTarget $bucket.name $retention.prefix) (printf "%s/%s" $minioTarget $bucket.name) (not (empty $retention.prefix)) }}
              {{ with $retention.versionId }}
              --version-id {{ . | quote }}
              {{ end }}
              {{ if $retention.recursive }}
              --recursive
              {{ end }}
              {{ if $retention.versions }}
              --versions
              {{ end }}
              {{ if $retention.default }}
              --default
              {{ end }}
              ;
              {{ end }}
              {{ end }}

              {{ if $bucket.lifecycle }}
              mc ilm import {{ $minioTarget }}/{{ $bucket.name }} <<EOF
              {
                "Rules": [
                  {{ range $idx, $lifecycle := $bucket.lifecycle }}
                  {{ if not (eq $idx 0) }}
                  ,
                  {{ end }}
                  {
                    "ID": "{{ $lifecycle.id }}",
                    "Status": "{{ ternary "Disabled" "Enabled" $lifecycle.disabled }}",
                    {{ if $lifecycle.expiry }}
                    "Expiration": {
                      {{ with $lifecycle.expiry.date }}
                      "Date": "{{ . }}"
                      {{ end }}
                      {{ with $lifecycle.expiry.days }}
                      "Days": {{ . }}
                      {{ end }}
                    }
                    {{ with $lifecycle.expiry.nonconcurrentDays }}
                    ,
                    "NoncurrentVersionExpiration": {
                      "NoncurrentDays": {{ . }}
                    }
                    {{ end }}
                    {{ with $lifecycle.prefix }}
                    ,
                    "Filter": {
                      "Prefix": "{{ . }}"
                    }
                    {{ end }}
                  }
                  {{ end }}
                  {{ end }}
                  {{ end }}
                ]
              }
              EOF;

              {{ with $bucket.quota }}
              mc admin bucket quota {{ $minioTarget }}/{{ $bucket.name }} --{{ .type }} {{ .size }};
              {{ end }}
              {{ end }}

              {{ range $config := .Values.provisioning.config }}
              mc admin config set {{ $minioTarget }} {{ $config.name }} {{ range $name, $value := $config.options }} {{ $name }}={{ $value }} {{ end }};
              {{ end }}

              echo "End Minio provisioning";
          env:
            - name: MINIO_SCHEME
              value: {{ ternary "https" "http" .Values.tls.enabled | quote }}
            {{- if .Values.auth.useCredentialsFiles }}
            - name: MINIO_ROOT_USER_FILE
              value: "/opt/bitnami/minio/secrets/root-user"
            {{- else }}
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "minio.secretName" . }}
                  key: root-user
            {{- end }}
            {{- if .Values.auth.useCredentialsFiles }}
            - name: MINIO_ROOT_PASSWORD_FILE
              value: "/opt/bitnami/minio/secrets/root-password"
            {{- else }}
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "minio.secretName" . }}
                  key: root-password
            {{- end }}
            {{- if .Values.tls.mountPath }}
            - name: MINIO_CERTSDIR
              value: {{ .Values.tls.mountPath | quote }}
            {{- end }}
          envFrom:
            {{- if .Values.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.extraEnvVarsSecret "context" $) }}
            {{- end }}
          {{- if .Values.provisioning.resources }}
          resources: {{- toYaml .Values.provisioning.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            {{- if .Values.auth.useCredentialsFiles }}
            - name: minio-credentials
              mountPath: /opt/bitnami/minio/secrets/
            {{- end }}
            {{- if .Values.tls.enabled }}
            - name: minio-certs
              mountPath: {{ default "/certs" .Values.tls.mountPath }}
            {{- end }}
      volumes:
        {{- if .Values.auth.useCredentialsFiles }}
        - name: minio-credentials
          secret:
            secretName: {{ include "minio.secretName" . }}
        {{- end }}
        {{- if .Values.tls.enabled }}
        - name: minio-certs
          secret:
            secretName: {{ include "minio.tlsSecretName" . }}
            items:
            - key: tls.crt
              path: public.crt
            - key: tls.key
              path: private.key
            - key: ca.crt
              path: CAs/public.crt
        {{- end }}
{{- end }}
