## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry and imagePullSecrets
##
# global:
#   imageRegistry: myRegistryName
#   imagePullSecrets:
#     - myRegistryKeySecretName
#   storageClass: myStorageClass

## Add labels to all the deployed resources
##
commonLabels: {}

## Add annotations to all the deployed resources
##
commonAnnotations: {}

## Kubernetes Cluster Domain
##
clusterDomain: cluster.local

## Extra objects to deploy (value evaluated as a template)
##
extraDeploy: []

## Number of nodes
##
replicaCount: 1

service:
  type: ClusterIP
  # HTTP Port
  port: 8080
  # HTTPS Port
  ## loadBalancerIP for the SuiteCRM Service (optional, cloud specific)
  ## ref: http://kubernetes.io/docs/user-guide/services/#type-loadbalancer
  ##
  ## loadBalancerIP:
  ##
  ## nodePorts:
  ##   http: <to set explicitly, choose port between 30000-32767>
  ##   https: <to set explicitly, choose port between 30000-32767>
  ##
  nodePorts:
    http: ""
  ## Enable client source IP preservation
  ## ref http://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
  ##
  externalTrafficPolicy: Cluster

## Configure the ingress resource that allows you to access the
## Netbox installation. Set up the URL
## ref: http://kubernetes.io/docs/user-guide/ingress/
##
ingress:
  ## Set to true to enable ingress record generation
  ##
  enabled: true

  ## Set this to true in order to add the corresponding annotations for cert-manager
  ##
  certManager: false

  ## Ingress Path type
  ##
  pathType: ImplementationSpecific

  ## Override API Version (automatically detected if not set)
  ##
  apiVersion:

  ## When the ingress is enabled, a host pointing to this will be created
  ##
  hostname: netbox.local

  ## The Path to netbox. You may need to set this to '/*' in order to use this
  ## with ALB ingress controllers.
  ##
  path: /

  ## Ingress annotations done as key:value pairs
  ## For a full list of possible ingress annotations, please see
  ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
  ##
  ## If certManager is set to true, annotation kubernetes.io/tls-acme: "true" will automatically be set
  ##
  annotations: {}

  ## Enable TLS configuration for the hostname defined at ingress.hostname parameter
  ## TLS certificates will be retrieved from a TLS secret with name: {{- printf "%s-tls" .Values.ingress.hostname }}
  ## You can use the ingress.secrets parameter to create this TLS secret or relay on cert-manager to create it
  ##
  tls: false

  ## The list of additional hostnames to be covered with this ingress record.
  ## Most likely the hostname above will be enough, but in the event more hosts are needed, this is an array
  ## extraHosts:
  ## - name: netbox.local
  ##   path: /
  ##

  ## Any additional arbitrary paths that may need to be added to the ingress under the main host.
  ## For example: The ALB ingress controller requires a special rule for handling SSL redirection.
  ## extraPaths:
  ## - path: /*
  ##   backend:
  ##     serviceName: ssl-redirect
  ##     servicePort: use-annotation
  ##

  ## The tls configuration for additional hostnames to be covered with this ingress record.
  ## see: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
  ## extraTls:
  ## - hosts:
  ##     - netbox.local
  ##   secretName: netbox.local-tls
  ##

  ## If you're providing your own certificates, please use this to add the certificates as secrets
  ## key and certificate should start with -----BEGIN CERTIFICATE----- or
  ## -----BEGIN RSA PRIVATE KEY-----
  ##
  ## name should line up with a tlsSecret set further up
  ## If you're using cert-manager, this is unneeded, as it will create the secret for you if it is not set
  ##
  ## It is also possible to create and manage the certificates outside of this helm chart
  ## Please see README.md for more information
  ##
  secrets: []
  ## - name: netbox.local-tls
  ##   key:
  ##   certificate:
  ##

## Netbox configuration 
##
image:
  registry: docker.io
  repository: netboxcommunity/netbox
  tag: v2.10.4
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: IfNotPresent
  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ##
  # pullSecrets:
  #   - myRegistryKeySecretName

## Configure extra options for liveness and readiness probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
##
livenessProbe:
  enabled: true
  httpGet:
    path: /login
    port: netbox
  initialDelaySeconds: 0
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 3
  successThreshold: 1
readinessProbe:
  enabled: true
  httpGet:
    path: /login
    port: netbox
  initialDelaySeconds: 0
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 3
  successThreshold: 1


netbox:
  debug: true
  maintenanceMode: false
  superuser_name: "admin"
  dbConnMaxAge: 300
  superuser_password: "admin"
  superuser_api_token: "admin"
  skipStartupScripts: true
  secret_key: ""
  ##
  ## Configuration of Netbox (see https://netbox.readthedocs.io/en/stable/configuration/) for reference
  ## use extraSecretConfig for configblocks containing secrets/passwords/access Keys
  ##
  extraConfig: |-
    ####
    ## This file contains extra configuration options that can't be configured
    ## directly through environment variables.
    ####

    ## Specify one or more name and email address tuples representing NetBox administrators. These people will be notified of
    ## application errors (assuming correct email settings are provided).
    # ADMINS = [
    #     # ['John Doe', 'jdoe@example.com'],
    # ]


    ## URL schemes that are allowed within links in NetBox
    # ALLOWED_URL_SCHEMES = (
    #     'file', 'ftp', 'ftps', 'http', 'https', 'irc', 'mailto', 'sftp', 'ssh', 'tel', 'telnet', 'tftp', 'vnc', 'xmpp',
    # )


    ## NAPALM optional arguments (see http://napalm.readthedocs.io/en/latest/support/#optional-arguments). Arguments must
    ## be provided as a dictionary.
    # NAPALM_ARGS = {}


    ## Enable installed plugins. Add the name of each plugin to the list.
    # from netbox.configuration.configuration import PLUGINS
    # PLUGINS.append('my_plugin')

    ## Plugins configuration settings. These settings are used by various plugins that the user may have installed.
    ## Each key in the dictionary is the name of an installed plugin and its value is a dictionary of settings.
    # from netbox.configuration.configuration import PLUGINS_CONFIG
    # PLUGINS_CONFIG['my_plugin'] = {
    #   'foo': 'bar',
    #   'buzz': 'bazz'
    # }


    ## Remote authentication support
    # REMOTE_AUTH_DEFAULT_PERMISSIONS = {}




    ## This file can contain arbitrary Python code, e.g.:
    # from datetime import datetime
    # now = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
    # BANNER_TOP = f'<marquee width="200px">This instance started on {now}.</marquee>'
  ##
  ## Configuration of Netbox (see https://netbox.readthedocs.io/en/stable/configuration/) for reference
  ## use extraConfig for configblocks not containing secrets/passwords/access Keys
  ##
  extraSecretConfig: |-
    ## By default uploaded media is stored on the local filesystem. Using Django-storages is also supported. Provide the
    ## class path of the storage driver in STORAGE_BACKEND and any configuration options in STORAGE_CONFIG. For example:
    # STORAGE_BACKEND = 'storages.backends.s3boto3.S3Boto3Storage'
    # STORAGE_CONFIG = {
    #     'AWS_ACCESS_KEY_ID': 'Key ID',
    #     'AWS_SECRET_ACCESS_KEY': 'Secret',
    #     'AWS_STORAGE_BUCKET_NAME': 'netbox',
    #     'AWS_S3_REGION_NAME': 'eu-west-1',
    # }
    EMAIL = {
    'SERVER': environ.get('EMAIL_SERVER', 'localhost'),
    'PORT': int(environ.get('EMAIL_PORT', 25)),
    'USERNAME': environ.get('EMAIL_USERNAME', ''),
    'PASSWORD': _read_secret('email_password', environ.get('EMAIL_PASSWORD', '')),
    'USE_SSL': environ.get('EMAIL_USE_SSL', 'False').lower() == 'true',
    'USE_TLS': environ.get('EMAIL_USE_TLS', 'False').lower() == 'true',
    'SSL_CERTFILE': environ.get('EMAIL_SSL_CERTFILE', ''),
    'SSL_KEYFILE': environ.get('EMAIL_SSL_KEYFILE', ''),
    'TIMEOUT': int(environ.get('EMAIL_TIMEOUT', 10)),  # seconds
    'FROM_EMAIL': environ.get('EMAIL_FROM', ''),
    }
    NAPALM_PASSWORD = _read_secret('napalm_password', environ.get('NAPALM_PASSWORD', ''))
## ConfigMap with netbox Configuration
##
# existingConfigmap:

## Command and args for running the container (set to default if not set). Use array form
##
command: []
args: []

## Deployment pod host aliases
## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
##
hostAliases: []

## netbox resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits: {}
  #   cpu: 200m
  #   memory: 256Mi
  requests: {}
  #   cpu: 200m
  #   memory: 10Mi

## netbox containers' Security Context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
##
containerSecurityContext:
  enabled: false
  runAsUser: 1000
  runAsNonRoot: true

## netbox pods' Security Context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
##
podSecurityContext:
  enabled: false
  fsGroup: 1000

## Pod affinity preset
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
## Allowed values: soft, hard
##
podAffinityPreset: ""

## Pod anti-affinity preset
## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
## Allowed values: soft, hard
##
podAntiAffinityPreset: soft

## Node affinity preset
## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
## Allowed values: soft, hard
##
nodeAffinityPreset:
  ## Node affinity type
  ## Allowed values: soft, hard
  ##
  type: ""
  ## Node label key to match
  ## E.g.
  ## key: "kubernetes.io/e2e-az-name"
  ##
  key: ""
  ## Node label values to match
  ## E.g.
  ## values:
  ##   - e2e-az1
  ##   - e2e-az2
  ##
  values: []

## Affinity for pod assignment. Evaluated as a template.
## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
##
affinity: {}

## Node labels for pod assignment. Evaluated as a template.
## ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}

## Tolerations for pod assignment. Evaluated as a template.
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []

## Pod extra labels
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
##
podLabels: {}

## Annotations for server pods.
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
##
podAnnotations: {}

## netbox pods' priority.
## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
##
# priorityClassName: ""

## lifecycleHooks for the netbox container to automate configuration before or after startup.
##
lifecycleHooks: {}

## Custom Liveness probes for netbox
##
customLivenessProbe: {}

## Custom Rediness probes netbox
##
customReadinessProbe: {}

## Update strategy - only really applicable for deployments with RWO PVs attached
## If replicas = 1, an update can get "stuck", as the previous pod remains attached to the
## PV, and the "incoming" pod can never start. Changing the strategy to "Recreate" will
## terminate the single previous pod, so that the new, incoming pod can attach to the PV
##
updateStrategy:
  type: RollingUpdate

## Additional environment variables to set
## Example:
## extraEnvVars:
##   - name: FOO
##     value: "bar"
##
extraEnvVars: []

## ConfigMap with extra environment variables
##
extraEnvVarsCM:

## Secret with extra environment variables
##
extraEnvVarsSecret:

## Extra volumes to add to the deployment
##
extraVolumes: []

## Extra volume mounts to add to the container
##
extraVolumeMounts: []

## Add init containers to the netbox pods.
## Example:
## initContainers:
##   - name: your-image-name
##     image: your-image
##     imagePullPolicy: Always
##     ports:
##       - name: portname
##         containerPort: 1234
##
initContainers: {}

## Add sidecars to the netbox pods.
## Example:
## sidecars:
##   - name: your-image-name
##     image: your-image
##     imagePullPolicy: Always
##     ports:
##       - name: portname
##         containerPort: 1234
##
sidecars: {}

persistence:
  media:
    enabled: true
  reports:
    enabled: true

## Init containers parameters:
## volumePermissions: Change the owner and group of the persistent volume mountpoint to runAsUser:fsGroup values from the securityContext section.
##
volumePermissions:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/minideb
    tag: buster
    pullPolicy: Always
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ##
    pullSecrets: []
    ##   - myRegistryKeySecretName
  ## Init containers' resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
    ## We usually recommend not to specify default resources and to leave this as a conscious
    ## choice for the user. This also increases chances charts run on environments with little
    ## resources, such as Minikube. If you do want to specify resources, uncomment the following
    ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    ##
    limits: {}
    ##   cpu: 100m
    ##   memory: 128Mi
    ##
    requests: {}
    ##   cpu: 100m
    ##   memory: 128Mi
    ##

## Redis(TM) chart configuration
##
## https://github.com/bitnami/charts/blob/master/bitnami/redis/values.yaml
##
redis:
  ## Whether to deploy a redis server to satisfy the applications requirements. To use an external redis instance set this to false and configure the externalRedis parameters
  ##
  enabled: true
  ## Use password authentication
  ##
  usePassword: false
  ## Redis(TM) password (both master and slave)
  ## Defaults to a random 10-character alphanumeric string if not set and usePassword is true.
  ## It should always be set using the password value or in the existingSecret to avoid issues
  ## with Netbox.
  ## The password value is ignored if existingSecret is set
  # password:
  ##
  ## Name of existing secret object containing the password
  ##
  existingSecret:
  ##
  ## Password key to be retrieved from Redis(TM) secret
  ##
  existingSecretPasswordKey: 'redis-password'
  ##
  ## Cluster settings
  ##
  cluster:
    enabled: false

  ##
  ## Redis(TM) Master parameters
  ##
  master:
    persistence:
      enabled: true

##
## External Redis(TM)
##
externalRedis:
  cachingRedis:
    ## Redis(TM) host
    ##
    host: ''
    ## Redis(TM) port
    ##
    port: 6379
    ## Redis(TM) password for authentication
    ## Ignored if existingSecret is set
    ##
    password: ''
    ##
    ## Name of existing secret object containing the password
    ##
    existingSecret:
    ##
    ## Password key to be retrieved from Redis(TM) secret
    ##
    existingSecretPasswordKey: 'redis-password'
    ##
    ## Database Index
    ##
    databaseIndex: 1
    ##
    ## Use SSL for conenction to Redis
    ##
    ssl: false
  taskRedis:
    ## Redis(TM) host
    ##
    host: ''
    ## Redis(TM) port
    ##
    port: 6379
    ## Redis(TM) password for authentication
    ## Ignored if existingSecret is set
    ##
    password: ''
    ##
    ## Name of existing secret object containing the password
    ##
    existingSecret:
    ##
    ## Password key to be retrieved from Redis(TM) secret
    ##
    existingSecretPasswordKey: 'redis-password'
    ##
    ## Database Index
    ##
    databaseIndex: 0
    ##
    ## Use SSL for conenction to Redis
    ##
    ssl: false
##
## PostgreSQL chart configuration
##
## https://github.com/bitnami/charts/blob/master/bitnami/postgresql/values.yaml
##
postgresql:
  enabled: true
  postgresqlUsername: postgres
  postgresqlPassword: "thisIsunsafe"
  postgresqlDatabase: netbox
  ## In case of postgresql.enabled = true, allow the usage of existing secrets for postgresql
  ##
  existingSecret:

externalDatabase:
  ## All of these values are only used when postgresql.enabled is set to false
  ## Database host
  ##
  host: localhost
  ## non-root Username for Airflow Database
  ##
  user: netbox
  ## Database password
  ##
  password:
  ## Name of an existing secret resource containing the DB password in a 'postgresql-password' key
  ##
  existingSecret:
  ## Database name
  ##
  database: netbox
  ## Database port number
  ##
  port: 5432