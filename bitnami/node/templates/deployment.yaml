apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ template "common.names.fullname" . }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
  	{{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
  replicas: {{ .Values.replicas }}
  template:
    metadata:
      {{- if .Values.podAnnotations }}
      annotations: {{- include "common.tplvalues.render" (dict "value" .Values.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        {{- if .Values.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.podLabels "context" $) | nindent 8 }}
        {{- end }}
    spec:
{{- include "node.imagePullSecrets" . | nindent 6 }}
      {{- if .Values.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.securityContext.enabled }}
      securityContext:
        fsGroup: {{ .Values.securityContext.fsGroup }}
        runAsUser: {{ .Values.securityContext.runAsUser }}
      {{- end }}
      initContainers:
        {{- if .Values.getAppFromExternalRepository }}
        - name: git-clone-repository
          image: {{ include "git.image" . }}
          imagePullPolicy: {{ .Values.git.pullPolicy | quote }}
          command:
            - /bin/bash
            - -ec
            - |
              git clone {{ .Values.repository }} --branch {{ .Values.revision }} /app
          volumeMounts:
            - name: app
              mountPath: /app
        - name: npm-install
          image: {{ template "node.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          workingDir: /app
          command:
            - /bin/bash
            - -ec
            - |
              npm install
          env:
            - name: HOME
              value: /tmp
          volumeMounts:
            - name: app
              mountPath: /app
        {{- if and .Values.volumePermissions.enabled .Values.persistence.enabled }}
        - name: volume-permissions
          image: {{ include "node.volumePermissions.image" . }}
          imagePullPolicy: {{ .Values.volumePermissions.image.pullPolicy | quote }}
          command:
            - /bin/bash
            - -ec
            - |
              chown -R {{ .Values.securityContext.runAsUser }}:{{ .Values.securityContext.fsGroup }} {{ .Values.persistence.path }}
          securityContext:
            runAsUser: 0
          {{- if .Values.volumePermissions.resources }}
          resources: {{- toYaml .Values.volumePermissions.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: {{ .Values.persistence.path }}
        {{- end }}
        {{- end }}
      containers:
        - name: node
          image: {{ template "node.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          env:
            {{- if .Values.mongodb.install }}
            - name: DATABASE_HOST
              value: {{ template "node.mongodb.fullname" . }}
            - name: DATABASE_PORT
              value: "27017"
            - name: DATABASE_USER
              value: {{ .Values.mongodb.auth.username | quote }}
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "node.mongodb.fullname" . }}
                  key: mongodb-password
            - name: DATABASE_NAME
              value: {{ .Values.mongodb.auth.database | quote }}
            - name: DATABASE_CONNECTION_OPTIONS
              value: ""
            {{- else if .Values.externaldb.enabled }}
            - name: DATABASE_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ template "node.secretName" . }}
                  key: host
            - name: DATABASE_NAME
              {{- if not .Values.externaldb.broker.serviceInstanceName }}
              valueFrom:
                secretKeyRef:
                  name: {{ template "node.secretName" . }}
                  key: database
              {{- else }}
              value: ""
              {{- end }}
            - name: DATABASE_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ template "node.secretName" . }}
                  key: port
            - name: DATABASE_USER
              valueFrom:
                secretKeyRef:
                  name: {{ template "node.secretName" . }}
                  key: username
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "node.secretName" . }}
                  key: password
            - name: DATABASE_CONNECTION_OPTIONS
              {{- if .Values.externaldb.ssl }}
              value: "ssl=true"
              {{- else }}
              value: ""
              {{- end }}
            {{- end }}
            - name: DATA_FOLDER
              value: "/app"
            {{- if .Values.extraEnv }}
            {{- toYaml .Values.extraEnv | nindent 12 }}
            {{- end }}
          workingDir: /app
          command:
            - /bin/bash
            - -ec
            - |
              npm start
          ports:
            - name: http
              containerPort: {{ .Values.applicationPort }}
          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 60
            timeoutSeconds: 5
            failureThreshold: 6
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 10
            timeoutSeconds: 3
            periodSeconds: 5
          {{- if .Values.resources }}
          resources: {{- toYaml .Values.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            {{- if .Values.getAppFromExternalRepository }}
            - name: app
              mountPath: /app
            {{- end }}
            - name: data
              mountPath: {{ .Values.persistence.path }}
      volumes:
        {{- if .Values.getAppFromExternalRepository }}
        - name: app
          emptyDir: {}
        {{- end }}
        - name: data
          {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ template "common.names.fullname" . }}-binding
          {{- else }}
          emptyDir: {}
          {{- end }}
