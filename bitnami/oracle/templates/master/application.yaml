apiVersion: {{ include "common.capabilities.statefulset.apiVersion" . }}
kind: {{ .Values.master.kind }}
metadata:
  name: {{ printf "%s-master" (include "common.names.fullname" .) }}
  namespace: {{ .Release.Namespace | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: master
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
  {{- end }}
  annotations:
    {{- if or .Values.commonAnnotations }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  replicas: 1
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: master
  {{- if (eq .Values.master.kind "StatefulSet") }}
  serviceName: {{ printf "%s-headless" (include "common.names.fullname" .) }}
  {{- end }}
  {{- if .Values.master.updateStrategy }}
  {{- if (eq .Values.master.kind "Deployment") }}
  strategy: {{- toYaml .Values.master.updateStrategy | nindent 4 }}
  {{- else }}
  updateStrategy: {{- toYaml .Values.master.updateStrategy | nindent 4 }}
  {{- end }}
  {{- end }}
  template:
    metadata:
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        app.kubernetes.io/component: master
        {{- if .Values.master.podLabels }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.master.podLabels "context" $ ) | nindent 8 }}
        {{- end }}
        {{- if and .Values.metrics.enabled .Values.metrics.podLabels }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.metrics.podLabels "context" $ ) | nindent 8 }}
    {{- end }}
    spec:
      {{- include "oracle.imagePullSecrets" . | nindent 6 }}
      {{- if .Values.master.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.master.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.master.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.master.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ template "oracle.serviceAccountName" . }}
      {{- if .Values.master.priorityClassName }}
      priorityClassName: {{ .Values.master.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.master.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.master.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.master.podAffinityPreset "component" "master" "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.master.podAntiAffinityPreset "component" "master" "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.master.nodeAffinityPreset.type "key" .Values.master.nodeAffinityPreset.key "values" .Values.master.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.master.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.master.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.master.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.master.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.master.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "common.tplvalues.render" (dict "value" .Values.master.topologySpreadConstraints "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.master.shareProcessNamespace }}
      shareProcessNamespace: {{ .Values.master.shareProcessNamespace }}
      {{- end }}
      {{- if .Values.master.schedulerName }}
      schedulerName: {{ .Values.master.schedulerName | quote }}
      {{- end }}
      {{- if .Values.master.dnsPolicy }}
      dnsPolicy: {{ .Values.master.dnsPolicy }}
      {{- end }}
      {{- if .Values.master.dnsConfig }}
      dnsConfig: {{- include "common.tplvalues.render" (dict "value" .Values.master.dnsConfig "context" $) | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.master.terminationGracePeriodSeconds }}
      containers:
      - name: oracle
        image: {{ template "oracle.image" . }}
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        {{- if .Values.master.lifecycleHooks }}
        lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.master.lifecycleHooks "context" $) | nindent 12 }}
        {{- end }}
        {{- if .Values.master.containerSecurityContext.enabled }}
        securityContext: {{- omit .Values.master.containerSecurityContext "enabled" | toYaml | nindent 12 }}
        {{- end }}
        env:
        - name: ORACLE_SID
          value: {{ template "oracle.envs.sid" . }}
        - name: ORACLE_PDB
          value: {{ template "oracle.envs.pdb" . }}
        - name: ORACLE_PWD
          valueFrom:
            secretKeyRef:
              name: {{ template "oracle.secretName" . }}
              key: {{ template "oracle.secretPasswordKey" . }}
        - name: ORACLE_CHARACTERSET
          value: {{ template "oracle.envs.char" . }}
        - name: ORACLE_DOMAIN
          value: {{ template "oracle.envs.domain" . }}
        {{- if .Values.master.resources }}
        - name: ORACLE_MEMORY
          value: {{- toYaml .Values.master.resources.resource.requests.memory | nindent 12 }}/2
        {{- else }}
        - name: ORACLE_MEMORY
          value: {{ template "oracle.envs.memory" . }}
        {{- end }}
        - name: ORACLE_BUNDLE
          value: basic
        ports:
        - name: sqlnet
          containerPort: {{ template "oracle.ports.containerPort" . }}
          hostPort: {{ template "oracle.ports.targetPort" . }}
          protocol: TCP
        - name: emnet
          containerPort: {{ template "oracle.ports.emContainerPort" . }}
          hostPort: {{ template "oracle.ports.emTargetPort" . }}
          protocol: TCP
        {{- if .Values.master.resources }}
        resources: {{- toYaml .Values.master.resources.resource | nindent 12 }}
        {{- end }}
        volumeMounts:
          - name: oracle-data
            mountPath: {{ .Values.master.persistence.path }}/oradata
            subPath: {{ .Values.master.persistence.subPath }}
  {{- if .Values.metrics.enabled }}
      - name: metrics
        ports:
        - containerPort: 9161
          name: http
        image: {{ include "oracle.metrics.image" . }}
        imagePullPolicy: {{ .Values.metrics.image.pullPolicy | quote }}
        {{- if .Values.metrics.resources }}
        resources: {{- toYaml .Values.metrics.resources | nindent 12 }}
        {{- end }}
  {{- if .Values.metrics.containerSecurityContext.enabled }}
        securityContext: {{- omit .Values.metrics.containerSecurityContext "enabled" | toYaml | nindent 12 }}
  {{- end }}
        env:
        - name: DATA_SOURCE_NAME
          valueFrom:
            configMapKeyRef:
              name: {{ .Values.global.app_name }}-data-source
              key: data_source_name
        - name: CUSTOM_METRICS
          value: /tmp/custom-metrics.toml
        volumeMounts:
        - name:  custom-metrics
          mountPath:  /tmp/custom-metrics.toml
          subPath: custom-metrics.toml
  {{- end }}
      volumes:
  {{- if .Values.metrics.enabled }}
      - name: custom-metrics
        configMap:
          defaultMode: 420
          name: {{ .Values.global.app_name }}-custom-metrics
  {{- end }}
  {{- if not .Values.master.persistence.enabled }}
      - name: oracle-data
        {{- if .Values.master.persistence.medium }}
        emptyDir: {
          medium: {{ .Values.master.persistence.medium | quote }}
        }
        {{- else }}
        emptyDir: {}
        {{- end }}
  {{- else if .Values.master.persistence.existingClaim }}
      - name: oracle-data
        persistentVolumeClaim:
          claimName: {{ printf "%s" (tpl .Values.master.persistence.existingClaim .) }}
  {{- else if (eq .Values.master.kind "Deployment") }}
      - name: oracle-data
        persistentVolumeClaim:
          claimName: {{ printf "oracle-data-%s-master" (include "common.names.fullname" .) }}
  {{- else if (eq .Values.master.kind "StatefulSet") }}
  volumeClaimTemplates:
  - metadata:
      name: oracle-data
    spec:
      accessModes:
        {{- range .Values.master.persistence.accessModes }}
      - {{ . | quote }}
        {{end}}
      storageClassName: {{ .Values.master.persistence.storageClass | quote }}
      resources:
        requests:
          storage: {{ .Values.master.persistence.size | quote }}
      {{- if .Values.master.persistence.selector }}
      selector: {{- include "common.tplvalues.render" (dict "value" .Values.master.persistence.selector "context" $) | nindent 10 }}
      {{- end }}
      {{- if .Values.master.persistence.dataSource }}
      dataSource: {{- include "common.tplvalues.render" (dict "value" .Values.master.persistence.dataSource "context" $) | nindent 10 }}
      {{- end }}
  {{- else }}
      - name: oracle-data
        emptyDir: {}
  {{- end }}