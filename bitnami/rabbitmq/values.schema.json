{
  "$schema": "http://json-schema.org/schema#",
  "type": "object",
  "properties": {
    "global": {
      "type": "object",
      "properties": {
        "imageRegistry": {
          "type": "string",
          "description": "Global Docker image registry",
          "default": ""
        },
        "imagePullSecrets": {
          "type": "array",
          "description": "Global Docker registry secret names as an array",
          "default": [],
          "items": {}
        },
        "defaultStorageClass": {
          "type": "string",
          "description": "Global default StorageClass for Persistent Volume(s)",
          "default": ""
        },
        "storageClass": {
          "type": "string",
          "description": "DEPRECATED: use global.defaultStorageClass instead",
          "default": ""
        },
        "compatibility": {
          "type": "object",
          "properties": {
            "openshift": {
              "type": "object",
              "properties": {
                "adaptSecurityContext": {
                  "type": "string",
                  "description": "Adapt the securityContext sections of the deployment to make them compatible with Openshift restricted-v2 SCC: remove runAsUser, runAsGroup and fsGroup and let the platform use their allowed default IDs. Possible values: auto (apply if the detected running cluster is Openshift), force (perform the adaptation always), disabled (do not perform adaptation)",
                  "default": "auto"
                }
              }
            }
          }
        }
      }
    },
    "image": {
      "type": "object",
      "properties": {
        "registry": {
          "type": "string",
          "description": "RabbitMQ image registry",
          "default": "REGISTRY_NAME"
        },
        "repository": {
          "type": "string",
          "description": "RabbitMQ image repository",
          "default": "REPOSITORY_NAME/rabbitmq"
        },
        "digest": {
          "type": "string",
          "description": "RabbitMQ image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
          "default": ""
        },
        "pullPolicy": {
          "type": "string",
          "description": "RabbitMQ image pull policy",
          "default": "IfNotPresent"
        },
        "pullSecrets": {
          "type": "array",
          "description": "Specify docker-registry secret names as an array",
          "default": [],
          "items": {}
        },
        "debug": {
          "type": "boolean",
          "description": "Set to true if you would like to see extra information on logs",
          "default": false
        }
      }
    },
    "nameOverride": {
      "type": "string",
      "description": "String to partially override rabbitmq.fullname template (will maintain the release name)",
      "default": ""
    },
    "fullnameOverride": {
      "type": "string",
      "description": "String to fully override rabbitmq.fullname template",
      "default": ""
    },
    "namespaceOverride": {
      "type": "string",
      "description": "String to fully override common.names.namespace",
      "default": ""
    },
    "kubeVersion": {
      "type": "string",
      "description": "Force target Kubernetes version (using Helm capabilities if not set)",
      "default": ""
    },
    "clusterDomain": {
      "type": "string",
      "description": "Kubernetes Cluster Domain",
      "default": "cluster.local"
    },
    "extraDeploy": {
      "type": "array",
      "description": "Array of extra objects to deploy with the release",
      "default": [],
      "items": {}
    },
    "commonAnnotations": {
      "type": "object",
      "description": "Annotations to add to all deployed objects",
      "default": {}
    },
    "servicenameOverride": {
      "type": "string",
      "description": "String to partially override headless service name",
      "default": ""
    },
    "commonLabels": {
      "type": "object",
      "description": "Labels to add to all deployed objects",
      "default": {}
    },
    "serviceBindings": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Create secret for service binding (Experimental)",
          "default": false
        }
      }
    },
    "enableServiceLinks": {
      "type": "boolean",
      "description": "Whether information about services should be injected into pod's environment variable",
      "default": true
    },
    "diagnosticMode": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enable diagnostic mode (all probes will be disabled and the command will be overridden)",
          "default": false
        },
        "command": {
          "type": "array",
          "description": "Command to override all containers in the deployment",
          "default": [
            "sleep"
          ],
          "items": {
            "type": "string"
          }
        },
        "args": {
          "type": "array",
          "description": "Args to override all containers in the deployment",
          "default": [
            "infinity"
          ],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "automountServiceAccountToken": {
      "type": "boolean",
      "description": "Mount Service Account token in pod",
      "default": true
    },
    "hostAliases": {
      "type": "array",
      "description": "Deployment pod host aliases",
      "default": [],
      "items": {}
    },
    "dnsPolicy": {
      "type": "string",
      "description": "DNS Policy for pod",
      "default": ""
    },
    "dnsConfig": {
      "type": "object",
      "description": "DNS Configuration pod",
      "default": {}
    },
    "auth": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "RabbitMQ application username",
          "default": "user"
        },
        "password": {
          "type": "string",
          "description": "RabbitMQ application password",
          "default": ""
        },
        "securePassword": {
          "type": "boolean",
          "description": "Whether to set the RabbitMQ password securely. This is incompatible with loading external RabbitMQ definitions and 'true' when not setting the auth.password parameter.",
          "default": true
        },
        "existingPasswordSecret": {
          "type": "string",
          "description": "Existing secret with RabbitMQ credentials (existing secret must contain a value for `rabbitmq-password` key or override with setting auth.existingSecretPasswordKey)",
          "default": ""
        },
        "existingSecretPasswordKey": {
          "type": "string",
          "description": "Password key to be retrieved from existing secret",
          "default": "rabbitmq-password"
        },
        "enableLoopbackUser": {
          "type": "boolean",
          "description": "If enabled, the user `auth.username` can only connect from localhost",
          "default": false
        },
        "erlangCookie": {
          "type": "string",
          "description": "Erlang cookie to determine whether different nodes are allowed to communicate with each other",
          "default": ""
        },
        "existingErlangSecret": {
          "type": "string",
          "description": "Existing secret with RabbitMQ Erlang cookie (must contain a value for `rabbitmq-erlang-cookie` key or override with auth.existingSecretErlangKey)",
          "default": ""
        },
        "existingSecretErlangKey": {
          "type": "string",
          "description": "Erlang cookie key to be retrieved from existing secret",
          "default": "rabbitmq-erlang-cookie"
        },
        "tls": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "description": "Enable TLS support on RabbitMQ",
              "default": false
            },
            "autoGenerated": {
              "type": "boolean",
              "description": "Generate automatically self-signed TLS certificates",
              "default": false
            },
            "failIfNoPeerCert": {
              "type": "boolean",
              "description": "When set to true, TLS connection will be rejected if client fails to provide a certificate",
              "default": true
            },
            "sslOptionsVerify": {
              "type": "string",
              "description": "Should [peer verification](https://www.rabbitmq.com/ssl.html#peer-verification) be enabled?",
              "default": "verify_peer"
            },
            "sslOptionsPassword": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "Enable usage of password for private Key",
                  "default": false
                },
                "existingSecret": {
                  "type": "string",
                  "description": "Name of existing Secret containing the sslOptionsPassword",
                  "default": ""
                },
                "key": {
                  "type": "string",
                  "description": "Enable Key referring to sslOptionsPassword in Secret specified in auth.tls.sslOptionsPassword.existingSecret",
                  "default": ""
                },
                "password": {
                  "type": "string",
                  "description": "Use this string as Password. If set, auth.tls.sslOptionsPassword.existingSecret and auth.tls.sslOptionsPassword.key are ignored",
                  "default": ""
                }
              }
            },
            "caCertificate": {
              "type": "string",
              "description": "Certificate Authority (CA) bundle content",
              "default": ""
            },
            "serverCertificate": {
              "type": "string",
              "description": "Server certificate content",
              "default": ""
            },
            "serverKey": {
              "type": "string",
              "description": "Server private key content",
              "default": ""
            },
            "existingSecret": {
              "type": "string",
              "description": "Existing secret with certificate content to RabbitMQ credentials",
              "default": ""
            },
            "existingSecretFullChain": {
              "type": "boolean",
              "description": "Whether or not the existing secret contains the full chain in the certificate (`tls.crt`). Will be used in place of `ca.cert` if `true`.",
              "default": false
            },
            "overrideCaCertificate": {
              "type": "string",
              "description": "Existing secret with certificate content be mounted instead of the `ca.crt` coming from caCertificate or existingSecret/existingSecretFullChain.",
              "default": ""
            }
          }
        }
      }
    },
    "logs": {
      "type": "string",
      "description": "Path of the RabbitMQ server's Erlang log file. Value for the `RABBITMQ_LOGS` environment variable",
      "default": "-"
    },
    "ulimitNofiles": {
      "type": "string",
      "description": "RabbitMQ Max File Descriptors",
      "default": "65535"
    },
    "maxAvailableSchedulers": {
      "type": "string",
      "description": "RabbitMQ maximum available scheduler threads",
      "default": ""
    },
    "onlineSchedulers": {
      "type": "string",
      "description": "RabbitMQ online scheduler threads",
      "default": ""
    },
    "memoryHighWatermark": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enable configuring Memory high watermark on RabbitMQ",
          "default": false
        },
        "type": {
          "type": "string",
          "description": "Memory high watermark type. Either `absolute` or `relative`",
          "default": "relative"
        },
        "value": {
          "type": "number",
          "description": "Memory high watermark value",
          "default": 0.4
        }
      }
    },
    "plugins": {
      "type": "string",
      "description": "List of default plugins to enable (should only be altered to remove defaults; for additional plugins use `extraPlugins`)",
      "default": "rabbitmq_management rabbitmq_peer_discovery_k8s"
    },
    "queue_master_locator": {
      "type": "string",
      "description": "Changes the queue_master_locator setting in the rabbitmq config file",
      "default": "min-masters"
    },
    "communityPlugins": {
      "type": "string",
      "description": "List of Community plugins (URLs) to be downloaded during container initialization",
      "default": ""
    },
    "extraPlugins": {
      "type": "string",
      "description": "Extra plugins to enable (single string containing a space-separated list)",
      "default": "rabbitmq_auth_backend_ldap"
    },
    "clustering": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enable RabbitMQ clustering",
          "default": true
        },
        "name": {
          "type": "string",
          "description": "RabbitMQ cluster name",
          "default": ""
        },
        "addressType": {
          "type": "string",
          "description": "Switch clustering mode. Either `ip` or `hostname`",
          "default": "hostname"
        },
        "rebalance": {
          "type": "boolean",
          "description": "Rebalance master for queues in cluster when new replica is created",
          "default": false
        },
        "forceBoot": {
          "type": "boolean",
          "description": "Force boot of an unexpectedly shut down cluster (in an unexpected order).",
          "default": false
        },
        "partitionHandling": {
          "type": "string",
          "description": "Switch Partition Handling Strategy. Either `autoheal` or `pause_minority` or `pause_if_all_down` or `ignore`",
          "default": "autoheal"
        }
      }
    },
    "loadDefinition": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enable loading a RabbitMQ definitions file to configure RabbitMQ",
          "default": false
        },
        "file": {
          "type": "string",
          "description": "Name of the definitions file",
          "default": "/app/load_definition.json"
        },
        "existingSecret": {
          "type": "string",
          "description": "Existing secret with the load definitions file",
          "default": ""
        }
      }
    },
    "command": {
      "type": "array",
      "description": "Override default container command (useful when using custom images)",
      "default": [],
      "items": {}
    },
    "args": {
      "type": "array",
      "description": "Override default container args (useful when using custom images)",
      "default": [],
      "items": {}
    },
    "lifecycleHooks": {
      "type": "object",
      "description": "Overwrite livecycle for the RabbitMQ container(s) to automate configuration before or after startup",
      "default": {}
    },
    "terminationGracePeriodSeconds": {
      "type": "number",
      "description": "Default duration in seconds k8s waits for container to exit before sending kill signal.",
      "default": 120
    },
    "extraEnvVars": {
      "type": "array",
      "description": "Extra environment variables to add to RabbitMQ pods",
      "default": [],
      "items": {}
    },
    "extraEnvVarsCM": {
      "type": "string",
      "description": "Name of existing ConfigMap containing extra environment variables",
      "default": ""
    },
    "extraEnvVarsSecret": {
      "type": "string",
      "description": "Name of existing Secret containing extra environment variables (in case of sensitive data)",
      "default": ""
    },
    "containerPorts": {
      "type": "object",
      "properties": {
        "amqp": {
          "type": "number",
          "description": "",
          "default": 5672
        },
        "amqpTls": {
          "type": "number",
          "description": "",
          "default": 5671
        },
        "dist": {
          "type": "number",
          "description": "",
          "default": 25672
        },
        "manager": {
          "type": "number",
          "description": "",
          "default": 15672
        },
        "epmd": {
          "type": "number",
          "description": "",
          "default": 4369
        },
        "metrics": {
          "type": "number",
          "description": "",
          "default": 9419
        }
      }
    },
    "initScripts": {
      "type": "object",
      "description": "Dictionary of init scripts. Evaluated as a template.",
      "default": {}
    },
    "initScriptsCM": {
      "type": "string",
      "description": "ConfigMap with the init scripts. Evaluated as a template.",
      "default": ""
    },
    "initScriptsSecret": {
      "type": "string",
      "description": "Secret containing `/docker-entrypoint-initdb.d` scripts to be executed at initialization time that contain sensitive data. Evaluated as a template.",
      "default": ""
    },
    "extraContainerPorts": {
      "type": "array",
      "description": "Extra ports to be included in container spec, primarily informational",
      "default": [],
      "items": {}
    },
    "configuration": {
      "type": "string",
      "description": "RabbitMQ Configuration file content: required cluster configuration",
      "default": "\"\""
    },
    "tcpListenOptions": {
      "type": "object",
      "properties": {
        "backlog": {
          "type": "number",
          "description": "Maximum size of the unaccepted TCP connections queue",
          "default": 128
        },
        "nodelay": {
          "type": "boolean",
          "description": "When set to true, deactivates Nagle's algorithm. Default is true. Highly recommended for most users.",
          "default": true
        },
        "linger": {
          "type": "object",
          "properties": {
            "lingerOn": {
              "type": "boolean",
              "description": "Enable Server socket lingering",
              "default": true
            },
            "timeout": {
              "type": "number",
              "description": "Server Socket lingering timeout",
              "default": 0
            }
          }
        },
        "keepalive": {
          "type": "boolean",
          "description": "When set to true, enables TCP keepalives",
          "default": false
        }
      }
    },
    "configurationExistingSecret": {
      "type": "string",
      "description": "Existing secret with the configuration to use as rabbitmq.conf.",
      "default": ""
    },
    "extraConfiguration": {
      "type": "string",
      "description": "Configuration file content: extra configuration to be appended to RabbitMQ configuration",
      "default": "\"\""
    },
    "extraConfigurationExistingSecret": {
      "type": "string",
      "description": "Existing secret with the extra configuration to append to `configuration`.",
      "default": ""
    },
    "advancedConfiguration": {
      "type": "string",
      "description": "Configuration file content: advanced configuration",
      "default": ""
    },
    "advancedConfigurationExistingSecret": {
      "type": "string",
      "description": "Existing secret with the advanced configuration file (must contain a key `advanced.config`).",
      "default": ""
    },
    "featureFlags": {
      "type": "string",
      "description": "that controls what features are considered to be enabled or available on all cluster nodes.",
      "default": ""
    },
    "ldap": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enable LDAP support",
          "default": false
        },
        "uri": {
          "type": "string",
          "description": "LDAP connection string.",
          "default": ""
        },
        "servers": {
          "type": "array",
          "description": "List of LDAP servers hostnames. This is valid only if ldap.uri is not set",
          "default": [],
          "items": {}
        },
        "port": {
          "type": "string",
          "description": "LDAP servers port. This is valid only if ldap.uri is not set",
          "default": ""
        },
        "userDnPattern": {
          "type": "string",
          "description": "Pattern used to translate the provided username into a value to be used for the LDAP bind.",
          "default": ""
        },
        "binddn": {
          "type": "string",
          "description": "DN of the account used to search in the LDAP server.",
          "default": ""
        },
        "bindpw": {
          "type": "string",
          "description": "Password for binddn account.",
          "default": ""
        },
        "basedn": {
          "type": "string",
          "description": "Base DN path where binddn account will search for the users.",
          "default": ""
        },
        "uidField": {
          "type": "string",
          "description": "Field used to match with the user name (uid, samAccountName, cn, etc). It matches with 'dn_lookup_attribute' in RabbitMQ configuration",
          "default": ""
        },
        "authorisationEnabled": {
          "type": "boolean",
          "description": "Enable LDAP authorisation. Please set 'advancedConfiguration' with tag, topic, resources and vhost mappings",
          "default": false
        },
        "tls": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "description": "Enabled TLS configuration.",
              "default": false
            },
            "startTls": {
              "type": "boolean",
              "description": "Use STARTTLS instead of LDAPS.",
              "default": false
            },
            "skipVerify": {
              "type": "boolean",
              "description": "Skip any SSL verification (hostanames or certificates)",
              "default": false
            },
            "verify": {
              "type": "string",
              "description": "Verify connection. Valid values are 'verify_peer' or 'verify_none'",
              "default": "verify_peer"
            },
            "certificatesMountPath": {
              "type": "string",
              "description": "Where LDAP certifcates are mounted.",
              "default": "/opt/bitnami/rabbitmq/ldap/certs"
            },
            "certificatesSecret": {
              "type": "string",
              "description": "Secret with LDAP certificates.",
              "default": ""
            },
            "CAFilename": {
              "type": "string",
              "description": "CA certificate filename. Should match with the CA entry key in the ldap.tls.certificatesSecret.",
              "default": ""
            },
            "certFilename": {
              "type": "string",
              "description": "Client certificate filename to authenticate against the LDAP server. Should match with certificate the entry key in the ldap.tls.certificatesSecret.",
              "default": ""
            },
            "certKeyFilename": {
              "type": "string",
              "description": "Client Key filename to authenticate against the LDAP server. Should match with certificate the entry key in the ldap.tls.certificatesSecret.",
              "default": ""
            }
          }
        }
      }
    },
    "extraVolumeMounts": {
      "type": "array",
      "description": "Optionally specify extra list of additional volumeMounts",
      "default": [],
      "items": {}
    },
    "extraVolumes": {
      "type": "array",
      "description": "Optionally specify extra list of additional volumes .",
      "default": [],
      "items": {}
    },
    "extraSecrets": {
      "type": "object",
      "description": "Optionally specify extra secrets to be created by the chart.",
      "default": {}
    },
    "extraSecretsPrependReleaseName": {
      "type": "boolean",
      "description": "Set this flag to true if extraSecrets should be created with <release-name> prepended.",
      "default": false
    },
    "replicaCount": {
      "type": "number",
      "description": "Number of RabbitMQ replicas to deploy",
      "default": 1
    },
    "schedulerName": {
      "type": "string",
      "description": "Use an alternate scheduler, e.g. \"stork\".",
      "default": ""
    },
    "podManagementPolicy": {
      "type": "string",
      "description": "Pod management policy",
      "default": "OrderedReady"
    },
    "podLabels": {
      "type": "object",
      "description": "RabbitMQ Pod labels. Evaluated as a template",
      "default": {}
    },
    "podAnnotations": {
      "type": "object",
      "description": "RabbitMQ Pod annotations. Evaluated as a template",
      "default": {}
    },
    "updateStrategy": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Update strategy type for RabbitMQ statefulset",
          "default": "RollingUpdate"
        }
      }
    },
    "statefulsetLabels": {
      "type": "object",
      "description": "RabbitMQ statefulset labels. Evaluated as a template",
      "default": {}
    },
    "statefulsetAnnotations": {
      "type": "object",
      "description": "RabbitMQ statefulset annotations. Evaluated as a template",
      "default": {}
    },
    "priorityClassName": {
      "type": "string",
      "description": "Name of the priority class to be used by RabbitMQ pods, priority class needs to be created beforehand",
      "default": ""
    },
    "podAffinityPreset": {
      "type": "string",
      "description": "Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
      "default": ""
    },
    "podAntiAffinityPreset": {
      "type": "string",
      "description": "Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
      "default": "soft"
    },
    "nodeAffinityPreset": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
          "default": ""
        },
        "key": {
          "type": "string",
          "description": "Node label key to match Ignored if `affinity` is set.",
          "default": ""
        },
        "values": {
          "type": "array",
          "description": "Node label values to match. Ignored if `affinity` is set.",
          "default": [],
          "items": {}
        }
      }
    },
    "affinity": {
      "type": "object",
      "description": "Affinity for pod assignment. Evaluated as a template",
      "default": {}
    },
    "nodeSelector": {
      "type": "object",
      "description": "Node labels for pod assignment. Evaluated as a template",
      "default": {}
    },
    "tolerations": {
      "type": "array",
      "description": "Tolerations for pod assignment. Evaluated as a template",
      "default": [],
      "items": {}
    },
    "topologySpreadConstraints": {
      "type": "array",
      "description": "Topology Spread Constraints for pod assignment spread across your cluster among failure-domains. Evaluated as a template",
      "default": [],
      "items": {}
    },
    "podSecurityContext": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enable RabbitMQ pods' Security Context",
          "default": true
        },
        "fsGroupChangePolicy": {
          "type": "string",
          "description": "Set filesystem group change policy",
          "default": "Always"
        },
        "sysctls": {
          "type": "array",
          "description": "Set kernel settings using the sysctl interface",
          "default": [],
          "items": {}
        },
        "supplementalGroups": {
          "type": "array",
          "description": "Set filesystem extra groups",
          "default": [],
          "items": {}
        },
        "fsGroup": {
          "type": "number",
          "description": "Set RabbitMQ pod's Security Context fsGroup",
          "default": 1001
        }
      }
    },
    "containerSecurityContext": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enabled RabbitMQ containers' Security Context",
          "default": true
        },
        "runAsUser": {
          "type": "number",
          "description": "Set RabbitMQ containers' Security Context runAsUser",
          "default": 1001
        },
        "runAsGroup": {
          "type": "number",
          "description": "Set RabbitMQ containers' Security Context runAsGroup",
          "default": 1001
        },
        "runAsNonRoot": {
          "type": "boolean",
          "description": "Set RabbitMQ container's Security Context runAsNonRoot",
          "default": true
        },
        "allowPrivilegeEscalation": {
          "type": "boolean",
          "description": "Set container's privilege escalation",
          "default": false
        },
        "readOnlyRootFilesystem": {
          "type": "boolean",
          "description": "Set container's Security Context readOnlyRootFilesystem",
          "default": true
        },
        "capabilities": {
          "type": "object",
          "properties": {
            "drop": {
              "type": "array",
              "description": "Set container's Security Context runAsNonRoot",
              "default": [
                "ALL"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        },
        "seccompProfile": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "Set container's Security Context seccomp profile",
              "default": "RuntimeDefault"
            }
          }
        }
      }
    },
    "resourcesPreset": {
      "type": "string",
      "description": "Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if resources is set (resources is recommended for production).",
      "default": "micro"
    },
    "resources": {
      "type": "object",
      "description": "Set container requests and limits for different resources like CPU or memory (essential for production workloads)",
      "default": {}
    },
    "livenessProbe": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enable livenessProbe",
          "default": true
        },
        "initialDelaySeconds": {
          "type": "number",
          "description": "Initial delay seconds for livenessProbe",
          "default": 120
        },
        "periodSeconds": {
          "type": "number",
          "description": "Period seconds for livenessProbe",
          "default": 30
        },
        "timeoutSeconds": {
          "type": "number",
          "description": "Timeout seconds for livenessProbe",
          "default": 20
        },
        "failureThreshold": {
          "type": "number",
          "description": "Failure threshold for livenessProbe",
          "default": 6
        },
        "successThreshold": {
          "type": "number",
          "description": "Success threshold for livenessProbe",
          "default": 1
        }
      }
    },
    "readinessProbe": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enable readinessProbe",
          "default": true
        },
        "initialDelaySeconds": {
          "type": "number",
          "description": "Initial delay seconds for readinessProbe",
          "default": 10
        },
        "periodSeconds": {
          "type": "number",
          "description": "Period seconds for readinessProbe",
          "default": 30
        },
        "timeoutSeconds": {
          "type": "number",
          "description": "Timeout seconds for readinessProbe",
          "default": 20
        },
        "failureThreshold": {
          "type": "number",
          "description": "Failure threshold for readinessProbe",
          "default": 3
        },
        "successThreshold": {
          "type": "number",
          "description": "Success threshold for readinessProbe",
          "default": 1
        }
      }
    },
    "startupProbe": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enable startupProbe",
          "default": false
        },
        "initialDelaySeconds": {
          "type": "number",
          "description": "Initial delay seconds for startupProbe",
          "default": 10
        },
        "periodSeconds": {
          "type": "number",
          "description": "Period seconds for startupProbe",
          "default": 30
        },
        "timeoutSeconds": {
          "type": "number",
          "description": "Timeout seconds for startupProbe",
          "default": 20
        },
        "failureThreshold": {
          "type": "number",
          "description": "Failure threshold for startupProbe",
          "default": 3
        },
        "successThreshold": {
          "type": "number",
          "description": "Success threshold for startupProbe",
          "default": 1
        }
      }
    },
    "customLivenessProbe": {
      "type": "object",
      "description": "Override default liveness probe",
      "default": {}
    },
    "customReadinessProbe": {
      "type": "object",
      "description": "Override default readiness probe",
      "default": {}
    },
    "customStartupProbe": {
      "type": "object",
      "description": "Define a custom startup probe",
      "default": {}
    },
    "initContainers": {
      "type": "array",
      "description": "Add init containers to the RabbitMQ pod",
      "default": [],
      "items": {}
    },
    "sidecars": {
      "type": "array",
      "description": "Add sidecar containers to the RabbitMQ pod",
      "default": [],
      "items": {}
    },
    "pdb": {
      "type": "object",
      "properties": {
        "create": {
          "type": "boolean",
          "description": "Enable/disable a Pod Disruption Budget creation",
          "default": true
        },
        "minAvailable": {
          "type": "string",
          "description": "Minimum number/percentage of pods that should remain scheduled",
          "default": ""
        },
        "maxUnavailable": {
          "type": "string",
          "description": "Maximum number/percentage of pods that may be made unavailable. Defaults to `1` if both `pdb.minAvailable` and `pdb.maxUnavailable` are empty.",
          "default": ""
        }
      }
    },
    "serviceAccount": {
      "type": "object",
      "properties": {
        "create": {
          "type": "boolean",
          "description": "Enable creation of ServiceAccount for RabbitMQ pods",
          "default": true
        },
        "name": {
          "type": "string",
          "description": "Name of the created serviceAccount",
          "default": ""
        },
        "automountServiceAccountToken": {
          "type": "boolean",
          "description": "Auto-mount the service account token in the pod",
          "default": false
        },
        "annotations": {
          "type": "object",
          "description": "Annotations for service account. Evaluated as a template. Only used if `create` is `true`.",
          "default": {}
        }
      }
    },
    "rbac": {
      "type": "object",
      "properties": {
        "create": {
          "type": "boolean",
          "description": "Whether RBAC rules should be created",
          "default": true
        },
        "rules": {
          "type": "array",
          "description": "Custom RBAC rules",
          "default": [],
          "items": {}
        }
      }
    },
    "persistence": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enable RabbitMQ data persistence using PVC",
          "default": true
        },
        "storageClass": {
          "type": "string",
          "description": "PVC Storage Class for RabbitMQ data volume",
          "default": ""
        },
        "selector": {
          "type": "object",
          "description": "Selector to match an existing Persistent Volume",
          "default": {}
        },
        "accessModes": {
          "type": "array",
          "description": "PVC Access Modes for RabbitMQ data volume",
          "default": [
            "ReadWriteOnce"
          ],
          "items": {
            "type": "string"
          }
        },
        "existingClaim": {
          "type": "string",
          "description": "Provide an existing PersistentVolumeClaims",
          "default": ""
        },
        "mountPath": {
          "type": "string",
          "description": "The path the volume will be mounted at",
          "default": "/opt/bitnami/rabbitmq/.rabbitmq/mnesia"
        },
        "subPath": {
          "type": "string",
          "description": "The subdirectory of the volume to mount to",
          "default": ""
        },
        "size": {
          "type": "string",
          "description": "PVC Storage Request for RabbitMQ data volume",
          "default": "8Gi"
        },
        "annotations": {
          "type": "object",
          "description": "Persistence annotations. Evaluated as a template",
          "default": {}
        },
        "labels": {
          "type": "object",
          "description": "Persistence labels. Evaluated as a template",
          "default": {}
        }
      }
    },
    "persistentVolumeClaimRetentionPolicy": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enable Persistent volume retention policy for rabbitmq Statefulset",
          "default": false
        },
        "whenScaled": {
          "type": "string",
          "description": "Volume retention behavior when the replica count of the StatefulSet is reduced",
          "default": "Retain"
        },
        "whenDeleted": {
          "type": "string",
          "description": "Volume retention behavior that applies when the StatefulSet is deleted",
          "default": "Retain"
        }
      }
    },
    "service": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Kubernetes Service type",
          "default": "ClusterIP"
        },
        "portEnabled": {
          "type": "boolean",
          "description": "Amqp port. Cannot be disabled when `auth.tls.enabled` is `false`. Listener can be disabled with `listeners.tcp = none`.",
          "default": true
        },
        "distPortEnabled": {
          "type": "boolean",
          "description": "Erlang distribution server port",
          "default": true
        },
        "managerPortEnabled": {
          "type": "boolean",
          "description": "RabbitMQ Manager port",
          "default": true
        },
        "epmdPortEnabled": {
          "type": "boolean",
          "description": "RabbitMQ EPMD Discovery service port",
          "default": true
        },
        "ports": {
          "type": "object",
          "properties": {
            "amqp": {
              "type": "number",
              "description": "Amqp service port",
              "default": 5672
            },
            "amqpTls": {
              "type": "number",
              "description": "Amqp TLS service port",
              "default": 5671
            },
            "dist": {
              "type": "number",
              "description": "Erlang distribution service port",
              "default": 25672
            },
            "manager": {
              "type": "number",
              "description": "RabbitMQ Manager service port",
              "default": 15672
            },
            "metrics": {
              "type": "number",
              "description": "RabbitMQ Prometheues metrics service port",
              "default": 9419
            },
            "epmd": {
              "type": "number",
              "description": "EPMD Discovery service port",
              "default": 4369
            }
          }
        },
        "portNames": {
          "type": "object",
          "properties": {
            "amqp": {
              "type": "string",
              "description": "Amqp service port name",
              "default": "amqp"
            },
            "amqpTls": {
              "type": "string",
              "description": "Amqp TLS service port name",
              "default": "amqp-tls"
            },
            "dist": {
              "type": "string",
              "description": "Erlang distribution service port name",
              "default": "dist"
            },
            "manager": {
              "type": "string",
              "description": "RabbitMQ Manager service port name",
              "default": "http-stats"
            },
            "metrics": {
              "type": "string",
              "description": "RabbitMQ Prometheues metrics service port name",
              "default": "metrics"
            },
            "epmd": {
              "type": "string",
              "description": "EPMD Discovery service port name",
              "default": "epmd"
            }
          }
        },
        "nodePorts": {
          "type": "object",
          "properties": {
            "amqp": {
              "type": "string",
              "description": "Node port for Ampq",
              "default": ""
            },
            "amqpTls": {
              "type": "string",
              "description": "Node port for Ampq TLS",
              "default": ""
            },
            "dist": {
              "type": "string",
              "description": "Node port for Erlang distribution",
              "default": ""
            },
            "manager": {
              "type": "string",
              "description": "Node port for RabbitMQ Manager",
              "default": ""
            },
            "epmd": {
              "type": "string",
              "description": "Node port for EPMD Discovery",
              "default": ""
            },
            "metrics": {
              "type": "string",
              "description": "Node port for RabbitMQ Prometheues metrics",
              "default": ""
            }
          }
        },
        "extraPorts": {
          "type": "array",
          "description": "Extra ports to expose in the service",
          "default": [],
          "items": {}
        },
        "extraPortsHeadless": {
          "type": "array",
          "description": "Extra ports to expose in the headless service",
          "default": [],
          "items": {}
        },
        "loadBalancerSourceRanges": {
          "type": "array",
          "description": "Address(es) that are allowed when service is `LoadBalancer`",
          "default": [],
          "items": {}
        },
        "allocateLoadBalancerNodePorts": {
          "type": "boolean",
          "description": "Whether to allocate node ports when service type is LoadBalancer",
          "default": true
        },
        "externalIPs": {
          "type": "array",
          "description": "Set the ExternalIPs",
          "default": [],
          "items": {}
        },
        "externalTrafficPolicy": {
          "type": "string",
          "description": "Enable client source IP preservation",
          "default": "Cluster"
        },
        "loadBalancerClass": {
          "type": "string",
          "description": "Set the LoadBalancerClass",
          "default": ""
        },
        "loadBalancerIP": {
          "type": "string",
          "description": "Set the LoadBalancerIP",
          "default": ""
        },
        "clusterIP": {
          "type": "string",
          "description": "Kubernetes service Cluster IP",
          "default": ""
        },
        "labels": {
          "type": "object",
          "description": "Service labels. Evaluated as a template",
          "default": {}
        },
        "annotations": {
          "type": "object",
          "description": "Service annotations. Evaluated as a template",
          "default": {}
        },
        "annotationsHeadless": {
          "type": "object",
          "description": "Headless Service annotations. Evaluated as a template",
          "default": {}
        },
        "headless": {
          "type": "object",
          "properties": {
            "annotations": {
              "type": "object",
              "description": "Annotations for the headless service.",
              "default": {}
            }
          }
        },
        "sessionAffinity": {
          "type": "string",
          "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
          "default": "None"
        },
        "sessionAffinityConfig": {
          "type": "object",
          "description": "Additional settings for the sessionAffinity",
          "default": {}
        }
      }
    },
    "ingress": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enable ingress resource for Management console",
          "default": false
        },
        "path": {
          "type": "string",
          "description": "Path for the default host. You may need to set this to '/*' in order to use this with ALB ingress controllers.",
          "default": "/"
        },
        "pathType": {
          "type": "string",
          "description": "Ingress path type",
          "default": "ImplementationSpecific"
        },
        "hostname": {
          "type": "string",
          "description": "Default host for the ingress resource",
          "default": "rabbitmq.local"
        },
        "annotations": {
          "type": "object",
          "description": "Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.",
          "default": {}
        },
        "tls": {
          "type": "boolean",
          "description": "Enable TLS configuration for the hostname defined at `ingress.hostname` parameter",
          "default": false
        },
        "selfSigned": {
          "type": "boolean",
          "description": "Set this to true in order to create a TLS secret for this ingress record",
          "default": false
        },
        "extraHosts": {
          "type": "array",
          "description": "The list of additional hostnames to be covered with this ingress record.",
          "default": [],
          "items": {}
        },
        "extraPaths": {
          "type": "array",
          "description": "An array with additional arbitrary paths that may need to be added to the ingress under the main host",
          "default": [],
          "items": {}
        },
        "extraRules": {
          "type": "array",
          "description": "The list of additional rules to be added to this ingress record. Evaluated as a template",
          "default": [],
          "items": {}
        },
        "extraTls": {
          "type": "array",
          "description": "The tls configuration for additional hostnames to be covered with this ingress record.",
          "default": [],
          "items": {}
        },
        "secrets": {
          "type": "array",
          "description": "Custom TLS certificates as secrets",
          "default": [],
          "items": {}
        },
        "ingressClassName": {
          "type": "string",
          "description": "IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)",
          "default": ""
        },
        "existingSecret": {
          "type": "string",
          "description": "It is you own the certificate as secret.",
          "default": ""
        }
      }
    },
    "networkPolicy": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Specifies whether a NetworkPolicy should be created",
          "default": true
        },
        "kubeAPIServerPorts": {
          "type": "array",
          "description": "List of possible endpoints to kube-apiserver (limit to your cluster settings to increase security)",
          "default": "[]",
          "items": {
            "type": "integer"
          }
        },
        "allowExternal": {
          "type": "boolean",
          "description": "Don't require server label for connections",
          "default": true
        },
        "allowExternalEgress": {
          "type": "boolean",
          "description": "Allow the pod to access any range of port and all destinations.",
          "default": true
        },
        "addExternalClientAccess": {
          "type": "boolean",
          "description": "Allow access from pods with client label set to \"true\". Ignored if `networkPolicy.allowExternal` is true.",
          "default": true
        },
        "extraIngress": {
          "type": "array",
          "description": "Add extra ingress rules to the NetworkPolicy",
          "default": "[]",
          "items": {
            "type": "string"
          }
        },
        "extraEgress": {
          "type": "array",
          "description": "Add extra ingress rules to the NetworkPolicy",
          "default": "[]",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "metrics": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enable exposing RabbitMQ metrics to be gathered by Prometheus",
          "default": false
        },
        "plugins": {
          "type": "string",
          "description": "Plugins to enable Prometheus metrics in RabbitMQ",
          "default": "rabbitmq_prometheus"
        },
        "serviceMonitor": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "description": "Create ServiceMonitor Resource for scraping metrics using PrometheusOperator",
              "default": false
            },
            "namespace": {
              "type": "string",
              "description": "Specify the namespace in which the serviceMonitor resource will be created",
              "default": ""
            },
            "interval": {
              "type": "string",
              "description": "Specify the interval at which metrics should be scraped",
              "default": "30s"
            },
            "scrapeTimeout": {
              "type": "string",
              "description": "Specify the timeout after which the scrape is ended",
              "default": ""
            },
            "jobLabel": {
              "type": "string",
              "description": "The name of the label on the target service to use as the job name in prometheus.",
              "default": ""
            },
            "relabelings": {
              "type": "array",
              "description": "RelabelConfigs to apply to samples before scraping.",
              "default": [],
              "items": {}
            },
            "metricRelabelings": {
              "type": "array",
              "description": "MetricsRelabelConfigs to apply to samples before ingestion.",
              "default": [],
              "items": {}
            },
            "honorLabels": {
              "type": "boolean",
              "description": "honorLabels chooses the metric's labels on collisions with target labels",
              "default": false
            },
            "targetLabels": {
              "type": "object",
              "description": "Used to keep given service's labels in target",
              "default": {}
            },
            "podTargetLabels": {
              "type": "object",
              "description": "Used to keep given pod's labels in target",
              "default": {}
            },
            "path": {
              "type": "string",
              "description": "Define the path used by ServiceMonitor to scrap metrics",
              "default": ""
            },
            "params": {
              "type": "object",
              "description": "Define the HTTP URL parameters used by ServiceMonitor",
              "default": {}
            },
            "selector": {
              "type": "object",
              "description": "ServiceMonitor selector labels",
              "default": {}
            },
            "labels": {
              "type": "object",
              "description": "Extra labels for the ServiceMonitor",
              "default": {}
            },
            "annotations": {
              "type": "object",
              "description": "Extra annotations for the ServiceMonitor",
              "default": {}
            }
          }
        },
        "prometheusRule": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "description": "Set this to true to create prometheusRules for Prometheus operator",
              "default": false
            },
            "additionalLabels": {
              "type": "object",
              "description": "Additional labels that can be used so prometheusRules will be discovered by Prometheus",
              "default": {}
            },
            "namespace": {
              "type": "string",
              "description": "namespace where prometheusRules resource should be created",
              "default": ""
            },
            "rules": {
              "type": "array",
              "description": "List of rules, used as template by Helm.",
              "default": [],
              "items": {}
            }
          }
        }
      }
    },
    "volumePermissions": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enable init container that changes the owner and group of the persistent volume(s) mountpoint to `runAsUser:fsGroup`",
          "default": false
        },
        "image": {
          "type": "object",
          "properties": {
            "registry": {
              "type": "string",
              "description": "Init container volume-permissions image registry",
              "default": "REGISTRY_NAME"
            },
            "repository": {
              "type": "string",
              "description": "Init container volume-permissions image repository",
              "default": "REPOSITORY_NAME/os-shell"
            },
            "digest": {
              "type": "string",
              "description": "Init container volume-permissions image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
              "default": ""
            },
            "pullPolicy": {
              "type": "string",
              "description": "Init container volume-permissions image pull policy",
              "default": "IfNotPresent"
            },
            "pullSecrets": {
              "type": "array",
              "description": "Specify docker-registry secret names as an array",
              "default": [],
              "items": {}
            }
          }
        },
        "resourcesPreset": {
          "type": "string",
          "description": "Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if volumePermissions.resources is set (volumePermissions.resources is recommended for production).",
          "default": "nano"
        },
        "resources": {
          "type": "object",
          "description": "Set container requests and limits for different resources like CPU or memory (essential for production workloads)",
          "default": {}
        },
        "containerSecurityContext": {
          "type": "object",
          "properties": {
            "runAsUser": {
              "type": "number",
              "description": "User ID for the init container",
              "default": 0
            }
          }
        }
      }
    }
  }
}