{{- if (include "redis.createStatefulSet" .) }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "redis.fullname" . }}
  labels: {{- include "redis.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels: {{- include "redis.matchLabels" . | nindent 6 }}
  {{- if .Values.updateStrategy }}
  strategy: {{ toYaml .Values.updateStrategy | nindent 4 }}
  {{- end }}
  replicas: {{ .Values.cluster.nodes }}
  serviceName: {{ include "redis.fullname" . }}-headless
  template:
    metadata:
      labels: {{- include "redis.labels" . | nindent 8 }}
      {{- if and .Values.metrics.enabled .Values.metrics.podLabels }}
      {{ toYaml .Values.metrics.podLabels | nindent 8 }}
      {{- end }}
      annotations:
        checksum/scripts: {{ include (print $.Template.BasePath "/scripts-configmap.yaml") . | sha256sum }}
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
      {{- if .Values.podAnnotations }}
      {{ toYaml .Values.podAnnotations | nindent 8 }}
      {{- end }}
      {{- if and .Values.metrics.enabled .Values.metrics.podAnnotations }}
      {{ toYaml .Values.metrics.podAnnotations | nindent 8 }}
      {{- end }}
    spec:
      {{- include "redis.imagePullSecrets" . | nindent 6 }}
      {{- if .Values.securityContext.enabled }}
      securityContext:
        fsGroup: {{ .Values.securityContext.fsGroup }}
        {{- if .Values.securityContext.sysctls }}
        sysctls:
          {{ toYaml .Values.securityContext.sysctls | nindent 8 }}
        {{- end }}
      {{- end }}
      serviceAccountName: "{{ template "redis.serviceAccountName" . }}"
      {{- if .Values.priorityClassName }}
      priorityClassName: "{{ .Values.priorityClassName }}"
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
      {{ tpl (toYaml .) $ | nindent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
      {{ toYaml .Values.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
      {{ toYaml .Values.tolerations | nindent 8 }}
      {{- end }}
      {{- if .Values.schedulerName }}
      schedulerName: "{{ .Values.schedulerName }}"
      {{- end }}
      containers:
        - name: {{ include "redis.fullname" . }}
          image: "{{ include "redis.image" . }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          {{- if .Values.securityContext.enabled }}
          securityContext:
            runAsUser: {{ .Values.securityContext.runAsUser }}
          {{- end }}
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            {{- if .Values.usePassword }}
            - name: REDISCLI_AUTH
              valueFrom:
                secretKeyRef:
                  name: {{ template "redis.secretName" . }}
                  key: {{ template "redis.secretPasswordKey" . }}
            {{- if .Values.usePasswordFile }}
            - name: REDIS_PASSWORD_FILE
              value: "/opt/bitnami/redis/secrets/redis-password"
            {{- else }}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "redis.secretName" . }}
                  key: {{ template "redis.secretPasswordKey" . }}
            {{- end }}
            {{- else }}
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            {{- end }}
            - name: REDIS_PORT
              value: {{ .Values.redisPort | quote }}
          ports:
            - name: tcp-redis
              containerPort: {{ .Values.redisPort }}
            - name: tcp-redis-bus
              containerPort: {{ .Values.cluster.busPort }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            exec:
              command:
                - sh
                - -c
                - /scripts/ping_liveness_local.sh {{ .Values.livenessProbe.timeoutSeconds }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled}}
          readinessProbe:
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            exec:
              command:
                - sh
                - -c
                - /scripts/ping_readiness_local.sh {{ .Values.livenessProbe.timeoutSeconds }}
          {{- end }}
          {{- if .Values.resources }}
          resources:
          {{- include "redis.tplValue" (dict "value" .Values.resources "context" $) | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: scripts
              mountPath: /scripts
            {{- if .Values.usePasswordFile }}
            - name: redis-password
              mountPath: /opt/bitnami/redis/secrets/
            {{- end }}
            - name: redis-data
              mountPath: {{ .Values.persistence.path }}
              subPath: {{ .Values.persistence.subPath }}
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
        {{- if .Values.metrics.enabled }}
        - name: metrics
          image: {{ template "redis.metrics.image" . }}
          imagePullPolicy: {{ .Values.metrics.image.pullPolicy | quote }}
          command:
            - /bin/bash
            - -c
            - |
              if [[ -f '/secrets/redis-password' ]]; then
              export REDIS_PASSWORD=$(cat /secrets/redis-password)
              fi
              redis_exporter{{- range $key, $value := .Values.metrics.extraArgs }} --{{ $key }}={{ $value }}{{- end }}
          env:
            - name: REDIS_ALIAS
              value: {{ template "redis.fullname" . }}
            {{- if and .Values.usePassword (not .Values.usePasswordFile) }}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "redis.secretName" . }}
                  key: {{ template "redis.secretPasswordKey" . }}
            {{- end }}
          volumeMounts:
            {{- if .Values.usePasswordFile }}
            - name: redis-password
              mountPath: /secrets/
            {{- end }}
          ports:
            - name: http-metrics
              containerPort: 9121
          resources:
        {{ toYaml .Values.metrics.resources | nindent 12 }}
        {{- end }}
      {{- $needsVolumePermissions := and .Values.volumePermissions.enabled (and ( and .Values.persistence.enabled (not .Values.persistence.existingClaim) ) .Values.securityContext.enabled) }}
      {{- if or $needsVolumePermissions .Values.sysctlImage.enabled }}
      initContainers:
        {{- if $needsVolumePermissions }}
        - name: volume-permissions
          image: "{{ template "redis.volumePermissions.image" . }}"
          imagePullPolicy: {{ .Values.volumePermissions.image.pullPolicy | quote }}
          command: ["/bin/chown", "-R", "{{ .Values.securityContext.runAsUser }}:{{ .Values.securityContext.fsGroup }}", "{{ .Values.persistence.path }}"]
          securityContext:
            runAsUser: 0
          resources:
          {{ toYaml .Values.volumePermissions.resources | nindent 12 }}
          volumeMounts:
            - name: redis-data
              mountPath: {{ .Values.persistence.path }}
              subPath: {{ .Values.persistence.subPath }}
        {{- end }}
        {{- if .Values.sysctlImage.enabled }}
        - name: init-sysctl
          image: {{ template "redis.sysctl.image" . }}
          imagePullPolicy: {{ default "" .Values.sysctlImage.pullPolicy | quote }}
          resources:
          {{ toYaml .Values.sysctlImage.resources | nindent 12 }}
          {{- if .Values.sysctlImage.mountHostSys }}
          volumeMounts:
            - name: host-sys
              mountPath: /host-sys
          {{- end }}
          command:
          {{ toYaml .Values.sysctlImage.command | nindent 12 }}
          securityContext:
            privileged: true
            runAsUser: 0
        {{- end }}
      {{- end }}
      volumes:
        - name: scripts
          configMap:
            name: {{ include "redis.fullname" . }}-scripts
            defaultMode: 0755
        {{- if .Values.usePasswordFile }}
        - name: redis-password
          secret:
            secretName: {{ include "redis.secretName" . }}
            items:
              - key: {{ include "redis.secretPasswordKey" . }}
                path: redis-password
        {{- end }}
        - name: config
          configMap:
            name: {{ include "redis.fullname" . }}
        {{- if not .Values.persistence.enabled }}
        - name: "redis-data"
          emptyDir: {}
        {{- else }}
        {{- if .Values.persistence.existingClaim }}
        - name: "redis-data"
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim }}
        {{- end }}
        {{- end }}
        {{- if .Values.sysctlImage.mountHostSys }}
        - name: host-sys
          hostPath:
            path: /sys
        {{- end }}
        - name: redis-tmp-conf
          emptyDir: {}
  {{- if and .Values.persistence.enabled (not .Values.persistence.existingClaim) }}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels: {{- include "redis.labels" . | nindent 10 }}
      spec:
        accessModes:
        {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
        {{ include "redis.storageClass" . }}
        selector:
        {{- if .Values.persistence.matchLabels }}
          matchLabels:
          {{ toYaml .Values.persistence.matchLabels | nindent 12 }}
        {{- end -}}
        {{- if .Values.persistence.matchExpressions }}
          matchExpressions:
          {{ toYaml .Values.persistence.matchExpressions | nindent 12 }}
        {{- end -}}
  {{- end }}
  updateStrategy:
    type: {{ .Values.statefulset.updateStrategy }}
    {{- if .Values.statefulset.rollingUpdatePartition }}
    {{- if (eq "Recreate" .Values.statefulset.updateStrategy) }}
    rollingUpdate: null
    {{- else }}
    rollingUpdate:
      partition: {{ .Values.statefulset.rollingUpdatePartition }}
    {{- end }}
    {{- end }}
{{- end }}
