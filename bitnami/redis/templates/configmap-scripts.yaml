apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "redis.fullname" . }}-scripts
  namespace: {{ .Release.Namespace | quote }}
  labels:
    app: {{ template "redis.name" . }}
    chart: {{ template "redis.chart" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
data:
{{- if and .Values.cluster.enabled .Values.sentinel.enabled }}
  get-master-host.sh: |
    #!/bin/bash
  {{- if .Values.usePasswordFile }}
    REDIS_PASSWORD=$(cat $REDIS_PASSWORD_FILE)
  {{- end }}
  {{- if .Values.usePassword }}
    no_auth_warning=$([[ "$(redis-cli --version)" =~ (redis-cli 5.*) ]] && echo --no-auth-warning)
    redis_auth="-a $REDIS_PASSWORD $no_auth_warning"
  {{- end }}
  {{- if .Values.tls.enabled }}
    redis_auth="$redis_auth --tls --cacert {{ template "redis.tlsCACert" . }}"
  {{- if .Values.tls.authClients }}
    redis_auth="$redis_auth --cert {{ template "redis.tlsCert" . }} --key {{ template "redis.tlsCertKey" . }}"
  {{- end }}
  {{- end }}
    sentinel_info_command=$(
      timeout -s 3 5 \
      redis-cli $redis_auth \
      -h {{ template "redis.fullname" . }}-headless.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }} \
      -p {{ .Values.sentinel.port }} \
      --raw sentinel get-master-addr-by-name {{ .Values.sentinel.masterSet }} \
      2>/dev/null
    )
    if [ $? -ge 1 ]; then
      exit 1
    fi

    master_host=$(echo $sentinel_info_command | awk '{print $1}')
    master_port=$(echo $sentinel_info_command | awk '{print $2}')
    ping_response=$(
      timeout -s 3 5 \
      redis-cli $redis_auth \
      -h $master_host -p $master_port \
      ping \
      2>/dev/null
    )
    if [ "$ping_response" != "PONG" ]; then
      exit 1
    fi
    echo $master_host

  start-node.sh: |
    #!/bin/bash
    SCRIPT_DIR="$(dirname "$0")"
{{- if .Values.usePasswordFile }}
    REDIS_PASSWORD=$(cat $REDIS_PASSWORD_FILE)
    REDIS_MASTER_PASSWORD=$(cat $REDIS_MASTER_PASSWORD_FILE)
{{- end }}
    REDIS_MASTER_HOST=$($SCRIPT_DIR/get-master-host.sh)
    if [[ ! $REDIS_MASTER_HOST ]]; then is_master=1; fi

  {{- if (eq (.Values.securityContext.runAsUser | int) 0) }}
    useradd redis
    chown -R redis {{ .Values.slave.persistence.path }}
  {{- end }}

    if [[ $is_master ]]; then
      echo "I am master"
      if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
      fi
    else
      if [[ ! -f /opt/bitnami/redis/etc/replica.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/replica.conf /opt/bitnami/redis/etc/replica.conf
      fi
    fi

    if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
      cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    {{- if .Values.tls.enabled }}
    ARGS=("--port" "0")
    ARGS+=("--tls-port" "${REDIS_TLS_PORT}")
    ARGS+=("--tls-cert-file" "${REDIS_TLS_CERT_FILE}")
    ARGS+=("--tls-key-file" "${REDIS_TLS_KEY_FILE}")
    ARGS+=("--tls-ca-cert-file" "${REDIS_TLS_CA_FILE}")
    ARGS+=("--tls-auth-clients" "${REDIS_TLS_AUTH_CLIENTS}")
    ARGS+=("--tls-replication" "yes")
    {{- if .Values.tls.dhParamsFilename }}
    ARGS+=("--tls-dh-params-file" "${REDIS_TLS_DH_PARAMS_FILE}")
    {{- end }}
    {{- else }}
    ARGS=("--port" "${REDIS_PORT}")
    {{- end }}

    {{- if .Values.usePassword }}
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_MASTER_PASSWORD}")
    {{- else }}
    ARGS+=("--protected-mode" "no")
    {{- end }}

    if [[ $is_master ]]; then
      ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    else
      ARGS+=("--slaveof" "${REDIS_MASTER_HOST}" "${REDIS_PORT}")
      ARGS+=("--include" "/opt/bitnami/redis/etc/replica.conf")
    fi

    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    {{- if .Values.slave.extraFlags }}
    {{- range .Values.slave.extraFlags }}
    ARGS+=({{ . | quote }})
    {{- end }}
    {{- end }}

    {{- if .Values.slave.command }}
    exec {{ .Values.slave.command }} "${ARGS[@]}"
    {{- else }}
    exec redis-server "${ARGS[@]}"
    {{- end }}

  start-sentinel.sh: |
    #!/bin/bash
    sentinel_conf_replace() {
        local -r key="${1:?missing key}"
        local value="${2:?missing value}"

        result=$(sed "s/$key.*/$key $value/g" /opt/bitnami/redis-sentinel/etc/sentinel.conf)
        echo "$result" > /opt/bitnami/redis-sentinel/etc/sentinel.conf
    }

    sentinel_conf_remove() {
        local -r key="${1:?missing key}"

        result=$(sed "s/$key.*//g" /opt/bitnami/redis-sentinel/etc/sentinel.conf)
        echo "$result" > /opt/bitnami/redis-sentinel/etc/sentinel.conf
    }

    sentinel_conf_append() {
      local -r value="${1:?missing value}"

      if [[ ! $(cat /opt/bitnami/redis-sentinel/etc/sentinel.conf | grep "$value") ]]; then
        printf "\n$value" >> /opt/bitnami/redis-sentinel/etc/sentinel.conf
      fi
    }

    get_known_sentinel() {
        response=$(
          timeout -s 3 5 \
          getent hosts \
          {{ template "redis.fullname" . }}-headless.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}
        )

        if [ $? -ge 1 ]; then
          return 1
        fi
        KNOWN_SENTINELS=$(echo "$response" | awk '{print $1}')
    }

    SCRIPT_DIR="$(dirname "$0")"
{{- if .Values.usePasswordFile }}
    REDIS_PASSWORD=$(cat $REDIS_PASSWORD_FILE)
{{- end }}
    REDIS_MASTER_HOST=$($SCRIPT_DIR/get-master-host.sh)
    if [[ ! $REDIS_MASTER_HOST ]]; then is_master=1; fi

    if [[ ! -f /opt/bitnami/redis-sentinel/etc/sentinel.conf ]]; then
      cp /opt/bitnami/redis-sentinel/mounted-etc/sentinel.conf /opt/bitnami/redis-sentinel/etc/sentinel.conf
      {{- if .Values.usePassword }}
      sentinel_conf_append "sentinel auth-pass {{ .Values.sentinel.masterSet }} $REDIS_PASSWORD"
      {{- if .Values.sentinel.usePassword }}
      sentinel_conf_append "requirepass $REDIS_PASSWORD"
      {{- end }}
      {{- end }}
      {{- if .Values.sentinel.staticID }}
      sentinel_conf_append "sentinel myid $(echo $HOSTNAME | openssl sha1 | awk '{ print $2 }')"
      {{- end }}
    fi

    if get_known_sentinel; then
      for known_sentinel in $KNOWN_SENTINELS; do
        if [[ $is_master ]]; then
          sentinel_conf_append "sentinel known-replica {{ .Values.sentinel.masterSet }} $known_sentinel {{ .Values.redisPort }}"
        fi 
        sentinel_conf_append "sentinel known-sentinel {{ .Values.sentinel.masterSet }} $known_sentinel $REDIS_SENTINEL_PORT"
      done
    fi

    if [[ $is_master ]]; then
      echo "I am master"
      sentinel_conf_replace "sentinel monitor" "{{ .Values.sentinel.masterSet }} $POD_IP {{ .Values.redisPort }} {{ .Values.sentinel.quorum }}"        
      sentinel_conf_remove "sentinel known-replica {{ .Values.sentinel.masterSet }} $POD_IP"
    else
      sentinel_conf_replace "sentinel monitor" "{{ .Values.sentinel.masterSet }} $REDIS_MASTER_HOST {{ .Values.redisPort }} {{ .Values.sentinel.quorum }}"
    fi

    {{- if .Values.tls.enabled }}
    ARGS=("--port" "0")
    ARGS+=("--tls-port" "${REDIS_SENTINEL_TLS_PORT_NUMBER}")
    ARGS+=("--tls-cert-file" "${REDIS_SENTINEL_TLS_CERT_FILE}")
    ARGS+=("--tls-key-file" "${REDIS_SENTINEL_TLS_KEY_FILE}")
    ARGS+=("--tls-ca-cert-file" "${REDIS_SENTINEL_TLS_CA_FILE}")
    ARGS+=("--tls-replication" "yes")
    ARGS+=("--tls-auth-clients" "${REDIS_SENTINEL_TLS_AUTH_CLIENTS}")
    {{- if .Values.tls.dhParamsFilename }}
    ARGS+=("--tls-dh-params-file" "${REDIS_SENTINEL_TLS_DH_PARAMS_FILE}")
    {{- end }}
    {{- end }}

    exec redis-server /opt/bitnami/redis-sentinel/etc/sentinel.conf --sentinel {{- if .Values.tls.enabled }} "${ARGS[@]}" {{- end }}
{{- else }}
  start-master.sh: |
    #!/bin/bash
    {{- if (eq (.Values.securityContext.runAsUser | int) 0) }}
    useradd redis
    chown -R redis {{ .Values.master.persistence.path }}
    {{- end }}
    if [[ -n $REDIS_PASSWORD_FILE ]]; then
      password_aux=`cat ${REDIS_PASSWORD_FILE}`
      export REDIS_PASSWORD=$password_aux
    fi
    if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
      cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
      cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    {{- if .Values.tls.enabled }}
    ARGS=("--port" "0")
    ARGS+=("--tls-port" "${REDIS_TLS_PORT}")
    ARGS+=("--tls-cert-file" "${REDIS_TLS_CERT_FILE}")
    ARGS+=("--tls-key-file" "${REDIS_TLS_KEY_FILE}")
    ARGS+=("--tls-ca-cert-file" "${REDIS_TLS_CA_FILE}")
    ARGS+=("--tls-auth-clients" "${REDIS_TLS_AUTH_CLIENTS}")
    {{- if .Values.tls.dhParamsFilename }}
    ARGS+=("--tls-dh-params-file" "${REDIS_TLS_DH_PARAMS_FILE}")
    {{- end }}
    {{- else }}
    ARGS=("--port" "${REDIS_PORT}")
    {{- end }}
    {{- if .Values.usePassword }}
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_PASSWORD}")
    {{- else }}
    ARGS+=("--protected-mode" "no")
    {{- end }}
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    {{- if .Values.master.extraFlags }}
    {{- range .Values.master.extraFlags }}
    ARGS+=({{ . | quote }})
    {{- end }}
    {{- end }}
    {{- if .Values.master.preExecCmds }}
    {{ .Values.master.preExecCmds | nindent 4}}
    {{- end }}
    {{- if .Values.master.command }}
    exec {{ .Values.master.command }} "${ARGS[@]}"
    {{- else }}
    exec redis-server "${ARGS[@]}"
    {{- end }}
  {{- if .Values.cluster.enabled }}
  start-slave.sh: |
    #!/bin/bash
    {{- if (eq (.Values.securityContext.runAsUser | int) 0) }}
    useradd redis
    chown -R redis {{ .Values.slave.persistence.path }}
    {{- end }}
    if [[ -n $REDIS_PASSWORD_FILE ]]; then
      password_aux=`cat ${REDIS_PASSWORD_FILE}`
      export REDIS_PASSWORD=$password_aux
    fi
    if [[ -n $REDIS_MASTER_PASSWORD_FILE ]]; then
      password_aux=`cat ${REDIS_MASTER_PASSWORD_FILE}`
      export REDIS_MASTER_PASSWORD=$password_aux
    fi
    if [[ ! -f /opt/bitnami/redis/etc/replica.conf ]];then
      cp /opt/bitnami/redis/mounted-etc/replica.conf /opt/bitnami/redis/etc/replica.conf
    fi
    if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
      cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    {{- if .Values.tls.enabled }}
    ARGS=("--port" "0")
    ARGS+=("--tls-port" "${REDIS_TLS_PORT}")
    ARGS+=("--tls-cert-file" "${REDIS_TLS_CERT_FILE}")
    ARGS+=("--tls-key-file" "${REDIS_TLS_KEY_FILE}")
    ARGS+=("--tls-ca-cert-file" "${REDIS_TLS_CA_FILE}")
    ARGS+=("--tls-auth-clients" "${REDIS_TLS_AUTH_CLIENTS}")
    ARGS+=("--tls-replication" "yes")
    {{- if .Values.tls.dhParamsFilename }}
    ARGS+=("--tls-dh-params-file" "${REDIS_TLS_DH_PARAMS_FILE}")
    {{- end }}
    {{- else }}
    ARGS=("--port" "${REDIS_PORT}")
    {{- end }}
    ARGS+=("--slaveof" "${REDIS_MASTER_HOST}" "${REDIS_MASTER_PORT_NUMBER}")
    {{- if .Values.usePassword }}
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_MASTER_PASSWORD}")
    {{- else }}
    ARGS+=("--protected-mode" "no")
    {{- end }}
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/replica.conf")
    {{- if .Values.slave.extraFlags }}
    {{- range .Values.slave.extraFlags }}
    ARGS+=({{ . | quote }})
    {{- end }}
    {{- end }}
    {{- if .Values.slave.preExecCmds }}
    {{ .Values.slave.preExecCmds | nindent 4}}
    {{- end }}
    {{- if .Values.slave.command }}
    exec {{ .Values.slave.command }} "${ARGS[@]}"
    {{- else }}
    exec redis-server "${ARGS[@]}"
    {{- end }}
  {{- end }}

{{- end -}}
