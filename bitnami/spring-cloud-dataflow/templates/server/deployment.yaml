{{- $fullname := include "scdf.fullname" .  }}
{{- $serverServicePort := int .Values.server.service.port }}
{{- $skipperServicePort := int .Values.skipper.service.port }}
{{- $releaseNamespace := .Release.Namespace }}
{{- $clusterDomain := .Values.clusterDomain }}
apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ include "scdf.fullname" . }}-server
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: server
spec:
  replicas: {{ .Values.server.replicaCount }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: server
  strategy:
    type: {{ .Values.server.strategyType }}
    {{- if (eq "Recreate" .Values.server.strategyType) }}
    rollingUpdate: null
    {{- end }}
  template:
    metadata:
      {{- if or (include "scdf.server.createConfigmap" .) .Values.server.podAnnotations }}
      annotations:
        {{- if (include "scdf.server.createConfigmap" .) }}
        checksum/configuration: {{ include (print $.Template.BasePath "/server/configmap.yaml") . | sha256sum }}
        {{- end }}
        {{- if .Values.server.podAnnotations }}
        {{- include "common.tplvalues.render" (dict "value" .Values.server.podAnnotations "context" $) | nindent 8 }}
        {{- end }}
      {{- end }}
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        app.kubernetes.io/component: server
    spec:
      {{- include "scdf.imagePullSecrets" . | indent 6 }}
      serviceAccountName: {{ include "scdf.serviceAccountName" . }}
      {{- if .Values.server.affinity }}
      affinity: {{- include "common.tplvalues.render" ( dict "value" .Values.server.affinity "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.server.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .Values.server.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.server.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.server.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.server.priorityClassName }}
      priorityClassName: {{ .Values.server.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.server.podSecurityContext }}
      securityContext: {{- toYaml .Values.server.podSecurityContext | nindent 8 }}
      {{- end }}
      {{- if .Values.waitForBackends.enabled }}
      initContainers:
        - name: wait-for-backends
          image: {{ include "scdf.waitForBackends.image" . }}
          imagePullPolicy: {{ .Values.waitForBackends.image.pullPolicy | quote }}
          command:
            - /scripts/wait-for-backends.sh
          {{- if .Values.waitForBackends.resources }}
          resources: {{- toYaml .Values.waitForBackends.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: scripts
              mountPath: /scripts/wait-for-backends.sh
              subPath: wait-for-backends.sh
      {{- end }}
      containers:
        - name: server
          image: {{ include "scdf.server.image" . }}
          imagePullPolicy: {{ .Values.server.image.pullPolicy | quote }}
          {{- if .Values.server.containerSecurityContext }}
          securityContext: {{- toYaml .Values.server.containerSecurityContext | nindent 12 }}
          {{- end }}
          env:
            - name: BITNAMI_DEBUG
              value: {{ ternary "true" "false" .Values.server.image.debug | quote }}
            - name: SERVER_PORT
              value: "8080"
            - name: SPRING_CLOUD_CONFIG_ENABLED
              value: "false"
            - name: SPRING_CLOUD_KUBERNETES_SECRETS_ENABLE_API
              value: "true"
            - name: SPRING_CLOUD_KUBERNETES_SECRETS_PATHS
              value: "/etc/secrets"
            - name: SPRING_CLOUD_KUBERNETES_CONFIG_NAME
              value: {{ (include "scdf.server.configmapName" .) | quote }}
            - name: SPRING_CLOUD_DATAFLOW_SERVER_URI
              {{- if ne $serverServicePort 80 }}
              value: {{ printf "http://%s-server.%s.svc.%s:%d" $fullname $releaseNamespace $clusterDomain $serverServicePort | quote }}
              {{- else }}
              value: {{ printf "http://%s-server.%s.svc.%s" $fullname $releaseNamespace $clusterDomain | quote }}
              {{- end }}
            - name: SPRING_CLOUD_DATAFLOW_FEATURES_STREAMS_ENABLED
              value: {{ ternary "true" "false" .Values.server.configuration.streamingEnabled | quote }}
            - name: SPRING_CLOUD_DATAFLOW_FEATURES_TASKS_ENABLED
              value: {{ ternary "true" "false" .Values.server.configuration.batchEnabled | quote }}
            - name: SPRING_CLOUD_DATAFLOW_FEATURES_SCHEDULES_ENABLED
              value: {{ ternary "true" "false" .Values.server.configuration.batchEnabled | quote }}
            {{- if .Values.server.configuration.streamingEnabled }}
            - name: SPRING_CLOUD_SKIPPER_CLIENT_SERVER_URI
              {{- if ne $skipperServicePort 80 }}
              value: {{ printf "http://%s-skipper.%s.svc.%s:%d/api" $fullname $releaseNamespace $clusterDomain $skipperServicePort | quote }}
              {{- else }}
              value: {{ printf "http://%s-skipper.%s.svc.%s/api" $fullname $releaseNamespace $clusterDomain | quote }}
              {{- end }}
            {{- end }}
            - name: SPRING_APPLICATION_JSON
              value: "{ \"maven\": { \"local-repository\": null, \"remote-repositories\": { \"repo1\": { \"url\": \"https://repo.spring.io/libs-snapshot\"} } } }"
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KUBERNETES_TRUST_CERTIFICATES
              value: {{ ternary "true" "false" .Values.server.configuration.trustK8sCerts | quote }}
            {{- range $key, $value := .Values.skipper.extraEnvs }}
            - name: {{ $key }}
              value: "{{ $value }}"
            {{- end }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          {{- if .Values.server.livenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.server.livenessProbe "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.server.readinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.server.readinessProbe "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.server.resources }}
          resources: {{- toYaml .Values.server.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: database
              mountPath: /etc/secrets/database
              readOnly: true
        {{- if .Values.server.sidecars }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.server.sidecars "context" $) | nindent 8 }}
        {{- end }}
      volumes:
        - name: database
          secret:
            secretName: {{ include "scdf.database.secretName" . }}
        {{- if .Values.waitForBackends.enabled }}
        - name: scripts
          configMap:
            name: {{ include "scdf.fullname" . }}-scripts
            defaultMode: 0755
        {{- end }}

