{{- if .Values.query.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "thanos.fullname" . }}-query
  labels: {{- include "thanos.labels" . | nindent 4 }}
    app.kubernetes.io/component: query
spec:
  replicas: {{ .Values.query.replicaCount }}
  strategy:
    type: {{ .Values.query.strategyType }}
    {{- if (eq "Recreate" .Values.query.strategyType) }}
    rollingUpdate: null
    {{- end }}
  selector:
    matchLabels: {{- include "thanos.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: query
  template:
    metadata:
      labels: {{- include "thanos.labels" . | nindent 8 }}
        app.kubernetes.io/component: query
      {{- if or (include "thanos.query.createSDConfigmap" .) .Values.query.existingSDConfigmap .Values.query.podAnnotations }}
      annotations:
        {{- if or (include "thanos.query.createSDConfigmap" .) .Values.query.existingSDConfigmap }}
        checksum/ruler-configuration: {{ include (print $.Template.BasePath "/query/sd-configmap.yaml") . | sha256sum }}
        {{- end }}
        {{- if .Values.query.podAnnotations }}
        {{- include "thanos.tplValue" (dict "value" .Values.query.podAnnotations "context" $) | nindent 8 }}
        {{- end }}
      {{- end }}
    spec:
{{- include "thanos.imagePullSecrets" . | nindent 6 }}
      serviceAccount: {{ include "thanos.serviceaccount.name" (dict "component" "query" "context" $) }}
      {{- if .Values.query.affinity }}
      affinity: {{- include "thanos.tplValue" (dict "value" .Values.query.affinity "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.query.nodeSelector }}
      nodeSelector: {{- include "thanos.tplValue" (dict "value" .Values.query.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.query.tolerations }}
      tolerations: {{- include "thanos.tplValue" (dict "value" .Values.query.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.query.priorityClassName }}
      priorityClassName: {{ .Values.query.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.query.securityContext.enabled }}
      securityContext:
        runAsUser: {{ .Values.query.securityContext.runAsUser }}
        fsGroup: {{ .Values.query.securityContext.fsGroup }}
      {{- end }}
      containers:
        - name: query
          image: {{ include "thanos.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          args:
            - query
            - --log.level={{ .Values.query.logLevel }}
            - --grpc-address=0.0.0.0:10901
            - --http-address=0.0.0.0:10902
            {{- if kindIs "string" .Values.query.replicaLabel }}
            - --query.replica-label={{ .Values.query.replicaLabel }}
            {{- else }}
            {{- range .Values.query.replicaLabel }}
            - --query.replica-label={{ . }}
            {{- end }}
            {{- end }}
            {{- if or (include "thanos.query.createSDConfigmap" .) .Values.query.existingSDConfigmap }}
            - --store.sd-files=/conf/servicediscovery.yml
            {{- end }}
            {{- if and .Values.query.dnsDiscovery.enabled .Values.query.dnsDiscovery.sidecarsService .Values.query.dnsDiscovery.sidecarsNamespace }}
            - --store=dnssrv+_grpc._tcp.{{- include "thanos.tplValue" ( dict "value" .Values.query.dnsDiscovery.sidecarsService "context" $) -}}.{{- include "thanos.tplValue"  ( dict "value" .Values.query.dnsDiscovery.sidecarsNamespace "context" $) -}}.svc.{{ .Values.clusterDomain }}
            {{- end }}
            {{- if and .Values.storegateway.enabled .Values.query.dnsDiscovery.enabled }}
            - --store=dnssrv+_grpc._tcp.{{ include "thanos.fullname" . }}-storegateway.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}
            {{- end }}
            {{- if and .Values.ruler.enabled .Values.query.dnsDiscovery.enabled }}
            - --store=dnssrv+_grpc._tcp.{{ include "thanos.fullname" . }}-ruler.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}
            {{- end }}
            {{- range .Values.query.stores }}
            - --store={{ . }}
            {{- end }}
            {{- if .Values.query.grpcTLS.server.secure }}
            - --grpc-server-tls-cert=/tls/server/cert.pem
            - --grpc-server-tls-key=/tls/server/key.pem
            - --grpc-server-tls-client-ca=/tls/server/ca.pem
            {{- end }}
            {{- if .Values.query.grpcTLS.client.secure }}
            - --grpc-client-tls-secure
            {{- if .Values.query.grpcTLS.client.cert }}
            - --grpc-client-tls-cert=/tls/client/cert.pem
            {{- end }}
            {{- if .Values.query.grpcTLS.client.key }}
            - --grpc-client-tls-key=/tls/client/key.pem
            {{- end }}
            {{- if .Values.query.grpcTLS.client.ca }}
            - --grpc-client-tls-ca=/tls/client/ca.pem
            {{- end }}
            {{- if .Values.query.grpcTLS.client.servername }}
            - --grpc-client-server-name={{.Values.query.grpcTLS.client.servername}}
            {{- end }}
            {{- end }}
            {{- range .Values.query.extraFlags }}
            - {{ . }}
            {{- end }}
          ports:
            - name: http
              containerPort: 10902
              protocol: TCP
            - name: grpc
              containerPort: 10901
              protocol: TCP
          {{- if .Values.query.livenessProbe }}
          livenessProbe: {{- include "thanos.tplValue" (dict "value" .Values.query.livenessProbe "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.query.readinessProbe }}
          readinessProbe: {{- include "thanos.tplValue" (dict "value" .Values.query.readinessProbe "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.query.resources }}
          resources: {{- toYaml .Values.query.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
      {{- if or (include "thanos.query.createSDConfigmap" .) .Values.query.existingSDConfigmap }}
            - name: sd-config
              mountPath: /conf/servicediscovery.yml
              subPath: servicediscovery.yml
      {{- end }}
      {{- if .Values.query.grpcTLS.server.secure }}
            - name: tls-server
              mountPath: /tls/server
      {{- end }}
      {{- if .Values.query.grpcTLS.client.secure }}
            - name: tls-client
              mountPath: /tls/client
      {{- end }}
      volumes:
      {{- if or (include "thanos.query.createSDConfigmap" .) .Values.query.existingSDConfigmap }}
        - name: sd-config
          configMap:
            name: {{ include "thanos.query.SDConfigmapName" . }}
      {{- end }}
      {{- if .Values.query.grpcTLS.server.secure }}
        - name: tls-server
          secret:
            secretName: {{ include "thanos.fullname" . }}-query-tls-server
      {{- end }}
      {{- if .Values.query.grpcTLS.client.secure }}
        - name: tls-client
          secret:
            secretName: {{ include "thanos.fullname" . }}-query-tls-client
      {{- end }}
{{- end }}
