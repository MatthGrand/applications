#!/bin/bash

readonly current_branch="$(git rev-parse --abbrev-ref HEAD)"
readonly origin_commit="$(git rev-parse --short "$(git merge-base master "$current_branch")")"
readonly files_to_push="$(git diff --name-only "$origin_commit")"
failed=0

check_kubeval() {
    if ! command -v kubeval > /dev/null 2>&1; then
        printf '\033[0;31m\U0001F6AB kubeval is not installed\033[0m'
        printf '  Install it from https://github.com/instrumenta/kubeval/releases'
        exit 1
    fi
}

for chart_name in $( cut -d'/' -f1,2 <<< "$files_to_push" | uniq ); do
    check_kubeval
    # Avoid running 'kubeval' when modified dirs are not charts
    if [[ $chart_name = bitnami/* ]]; then
        printf '\033[01;33mValidating %s with kubeval:\n\033[0m' "$chart_name"
        chart_path="$(git rev-parse --show-toplevel)"/"$chart_name"
        for values_file in "$chart_path"/values.yaml "$chart_path"/ci/*.yaml; do
            if [[ ! -f "$values_file" ]];then
                continue
            fi
            values_file_display=${values_file#$chart_path/}

            printf '\033[0;34m- Running helm template --values %s %s | kubeval\n\033[0m' "$values_file_display" "$chart_name"
            if helm template --values "$values_file" "$chart_path" | kubeval; then
                printf '\033[0;32m\U00002705 helm template --values %s %s | kubeval\n\n\033[0m' "$values_file_display" "$chart_name"
            else
                printf '\033[0;31m\U0001F6AB helm template --values %s %s | kubeval failed. Push cancelled.\n\n\033[0m' "$values_file_display" "$chart_name"
                failed=1
            fi
        done
    fi
done

exit $failed
